{"version":3,"sources":["regle-cras.png","helpers/helpers.js","helpers/GenerateMap.js","components/Canvas.jsx","components/SeaMap.jsx","components/TopBar.jsx","components/Modals/SettingsModal.jsx","components/Modals/LoadMapModal.jsx","components/Modals.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["isBetween","value","lower","higher","getCenterTile","zoom","degLatitude","degLongitude","degLatDist","degLongDist","parseInt","Math","asinh","tan","PI","getBeginLastTile","beginLatDegree","beginLongDegree","lastLatDegree","lastLongDegree","convertToDecimalDegre","latitude","longitude","latitudeDistance","longitudeDistance","decimalDegreLatitude","deg","min","sec","decimalDegreLongitude","decimalDegreLatitudeDistance","decimalDegreLongitudeDistance","orientation","generateTileArray","centerTileCoords","beginLastCoords","size","beginLatTile","beginLongTile","lastLatTile","lastLongTile","sizeLatitude","sizeLongitude","tileArray","Array","map","i","j","deg_to_dms","dd","isLng","dir","absDd","abs","frac","round","nbrTrait","tabPoints","Point","x","y","this","_x","_y","pt2","pt1","Line","_coef","getCoef","_origin","line","origin","coef","Canvas","props","mapArray","amer","mapSettingsData","useState","show","setShow","handleClose","angleVal","setAngleVal","longueurVal","setLongueurVal","deviation","setDeviation","declinaison","setDeclinaison","x1","y1","r","angle","drawLineData","setDrawLineData","amerCanvasRef","useRef","useEffect","length","amerCanvas","current","height","width","drawAndPlaceCRA","regle","Image","src","image","alt","context","getContext","onload","save","translate","rotate","drawImage","restore","clearRect","stroke","trouverMilieu","pt3","pt4","pt5","pt6","line1","line2","line3","pt_intersection1","getIntersection","pt_intersection2","pt_intersection3","line_median1","getMedian","line_median2","middle1","console","log","xtab","ytab","color","fillStyle","beginPath","arc","fill","drawPoint","rect","fillText","temp","resY","addEventListener","e","clientX","clientY","getBoundingClientRect","left","top","document","getElementById","innerHTML","id","ref","className","onClick","event","setCoordinates","Modal","onHide","centered","Header","Title","Body","Form","Label","htmlFor","Control","onChange","target","type","placeholder","Footer","Button","variant","lineWidth","moveTo","push","lineTo","cos","sin","drawLine","SeaMap","tableRef","isStoredMap","storedMapName","canvasGraticuleRef","cellSpacing","cellPadding","style","border","row","rowIndex","cell","cellIndex","canvasGraticule","setLineDash","coordCentX","coordCentY","coordEstX","coordSudY","renderTooltip","title","Tooltip","TopBar","setShowSettings","setShowLoadMap","amerState","setAmer","Navbar","sticky","position","bg","href","OverlayTrigger","placement","overlay","disabled","navigator","onLine","icon","faMapMarkedAlt","faSave","faLifeRing","faPencilRuler","SettingsModal","setMapArray","mapNameState","savedMapsState","mapSettingsDataState","setIsStoredMap","setMapSettingsData","savedMaps","setSavedMaps","showSettings","mapName","setMapName","latDeg","setLatDeg","latMin","setLatMin","latSec","setLatSec","latRad","setLatRad","lonDeg","setLonDeg","lonMin","setLonMin","lonSec","setLonSec","lonRad","setLonRad","lonDistDeg","setLonDistDeg","lonDistMin","setLonDistMin","latDistDeg","setLatDistDeg","latDistMin","setLatDistMin","mapZoom","setMapZoom","handleCloseSettings","noValidate","name","role","aria-label","autoComplete","checked","find","savedMap","data","alert","generateMapArray","tiles","LoadMapModal","mapArrayState","isStoredMapState","storedMapState","showLoadMap","currentlySelectedMapName","setCurrentlySelectedMapName","handleCloseLoadMap","Group","as","selected","currMap","selectedMapIndex","Modals","settingsModal","loadMapModal","App","setStoredMapName","hasScrollListener","setHasScrollListener","ele","html","documentElement","mouseMoveHandler","dx","dy","offsetLeft","scrollWidth","clientWidth","offsetTop","scrollHeight","clientHeight","mouseUpHandler","removeEventListener","cursor","removeProperty","userSelect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","window","cordova"],"mappings":"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","file":"static/js/main.a199f854.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/regle-cras.38c0b4c7.png\";","export const isBetween = (value, lower, higher) => value >= lower && value <= higher;\nexport const degToRadian = (degrees) => { return degrees * (Math.PI / 180); }","export const generateMapArray = (data) => {\n    const { latitude, longitude, latitudeDistance, longitudeDistance, zoom, size } = data;\n\n\n    const { decimalDegreLatitude, decimalDegreLongitude, decimalDegreLatitudeDistance, decimalDegreLongitudeDistance } =\n        convertToDecimalDegre(latitude, longitude,latitudeDistance, longitudeDistance);\n\n\n    const centerTileCoords = getCenterTile(\n        zoom,\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    );\n\n    const beginLastCoords = getBeginLastTile(\n        zoom,\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    );\n    \n    return generateTileArray(centerTileCoords, beginLastCoords, zoom, size);\n};\n\n/**\n * Fonction permettant de convertir des degrés en numéro de la Tile centrale pour préparer\n * les appels à l'API OpenStreetMap et OpenSeaMap\n * @param {Le zoom que l'on veut appliquer à la carte} zoom\n * @param {Le degré de latitude} degLatitude\n * @param {Le degré de longitude} degLongitude\n * @returns Un tableau avec les 2 paramètres nécessaires aux appels l'API OpenStreetMap et OpenSeaMap\n */\nconst getCenterTile = (zoom, degLatitude, degLongitude, degLatDist, degLongDist) => [\n    parseInt(\n        ((1.0 - Math.asinh(Math.tan(degLatitude * (Math.PI / 180))) / Math.PI) /\n            2.0) *\n            2.0 ** zoom\n    ),\n    parseInt(((degLongitude + 180.0) / 360.0) * 2.0 ** zoom),\n    parseInt(\n        ((1.0 - Math.asinh(Math.tan(degLatDist * (Math.PI / 180))) / Math.PI) /\n            2.0) *\n            2.0 ** zoom\n    ),\n    parseInt(((degLongDist + 180.0) / 360.0) * 2.0 ** zoom)\n\n];\n\nconst getBeginLastTile = (zoom, degLatitude, degLongitude, degLatDist, degLongDist) => {\n\n  const beginLatDegree = degLatitude - degLatDist;\n  const beginLongDegree = degLongitude - degLongDist;\n\n  const lastLatDegree = degLatitude + degLatDist;\n  const lastLongDegree = degLongitude + degLongDist;\n\n\n\n  const beginLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(beginLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const beginLongTile = parseInt(((beginLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\n\n  const lastLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(lastLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const lastLongTile = parseInt(((lastLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\nreturn [beginLatTile, beginLongTile, lastLatTile, lastLongTile];\n};\n\n\n/**\n * Fonction permettant de convertir des DMS (Degré, Minutes, Secondes) en DD (Degré Decimaux)\n * @param {La latitude à convertir en DD} latitude\n * @param {La longitude à convertir en DD} longitude\n * @returns Les coordonnées DMS converties en DD\n */\nexport const convertToDecimalDegre = (latitude, longitude, latitudeDistance, longitudeDistance) => {\n    const decimalDegreLatitude =\n        parseInt(latitude.deg) +\n        (latitude.min * 60 + parseInt(latitude.sec)) / 3600;\n    const decimalDegreLongitude =\n        parseInt(longitude.deg) +\n        (longitude.min * 60 + parseInt(longitude.sec)) / 3600;\n\n    const decimalDegreLatitudeDistance =\n        parseInt(latitudeDistance.deg) +\n        (latitudeDistance.min * 60)/3600;\n\n    const decimalDegreLongitudeDistance =\n        parseInt(longitudeDistance.deg) +\n        (longitudeDistance.min * 60)/3600;\n\n\n    return {\n        decimalDegreLatitude:\n            latitude.orientation === \"S\"\n                ? -decimalDegreLatitude\n                : decimalDegreLatitude,\n        decimalDegreLongitude:\n            longitude.orientation === \"O\"\n                ? -decimalDegreLongitude\n                : decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n\n    };\n};\n\n/**\n * Créé le tableau contenant les coordonnées de toutes les tiles\n * @param {Les coordonnées de la taille centrale} centerTileCoords\n * @param {Le zoom de la carte} zoom\n * @param {La taille de la carte} size\n * @returns\n */\nconst generateTileArray = (centerTileCoords, beginLastCoords, zoom, size) => {\n\n\n\n    const beginLatTile = beginLastCoords[0];\n    const beginLongTile = beginLastCoords[1];\n\n    const lastLatTile = beginLastCoords[2];\n    const lastLongTile = beginLastCoords[3];\n\n    const sizeLatitude = beginLatTile - lastLatTile ;\n    const sizeLongitude = lastLongTile - beginLongTile ;\n\n    const tileArray = [...Array(sizeLatitude + 1)].map(() => Array(sizeLongitude + 1));\n\n    const latitudeDistance = (sizeLatitude / 2) >> 0;\n    const longitudeDistance = (sizeLongitude / 2) >> 0;\n\n\n\n    /*\n    const end = (size / 2) >> 0;\n    const start = size % 2 !== 0 ? -end : -(end - 1);\n    const add = size % 2 !== 0 ? end : Math.abs(start);\n    */\n    for (let i = beginLongTile; i <= lastLongTile; ++i){\n        for (let j = lastLatTile; j <= beginLatTile; ++j){\n            tileArray[j - lastLatTile][i - beginLongTile] = [\n                zoom,\n                 i,\n                 j\n            ];\n          }\n        }\n    return tileArray;\n};\n\n\nexport function deg_to_dms (dd, isLng) {\n  var dir = dd < 0\n     ? isLng ? 'O' : 'S'\n     : isLng ? 'E' : 'N';\n\n   var absDd = Math.abs(dd);\n   var deg = absDd | 0;\n   var frac = absDd - deg;\n   var min = (frac * 60) | 0;\n   var sec = frac * 3600 - min * 60;\n   // Round it to 2 decimal points.\n   sec = Math.round(sec * 100) / 100;\n   return deg + \"°\" + min + \"'\" + sec + '\"' + dir;\n}\n","import \"./Canvas.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport image from \"../regle-cras.png\";\nimport { degToRadian } from \"../helpers/helpers\";\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nimport { deg_to_dms } from \"../helpers/GenerateMap\";\nimport context from \"react-bootstrap/esm/AccordionContext\";\n// Valeur pour prendre le nord en référence comme 0°\nconst DEFAULT_ANGLE = 90;\nconst CALIBRAGE_ZERO_ROUGE = -0.0845;\nconst CALIBRAGE_ZERO_NOIR = -0.9155;\nvar nbrTrait = 0;\nvar tabPoints = [];\n\nclass Point {\n    constructor(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n\n    get x() {\n        return this._x;\n    }\n    get y() {\n        return this._y;\n    }\n\n    getCoef(pt2) {\n        return (pt2.y - this._y) / (pt2.x - this._x);\n    }\n\n    getMedian(pt1, pt2) {\n        let x = (pt1.x + pt2.x) / 2;\n        let y = (pt1.y + pt2.y) / 2;\n\n        return new Line(this, new Point(x, y));\n    }\n}\n\nclass Line {\n    constructor(pt1, pt2) {\n        this._coef = pt1.getCoef(pt2);\n        this._origin = pt1.y - this._coef * pt1.x;\n    }\n\n    get coef() {\n        return this._coef;\n    }\n    get origin() {\n        return this._origin;\n    }\n\n    getValue(x) {\n        return this._coef * x + this._origin;\n    }\n\n    getIntersection(line) {\n        let x = Math.abs(\n            (line.origin - this._origin) / (line.coef - this._coef)\n        );\n        let y = this._coef * x + this._origin;\n        return new Point(x, y);\n    }\n}\n\nexport const Canvas = (props) => {\n    const { mapArray, amer, mapSettingsData } = props;\n    //Modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n    // Angle et Longueur\n    const [angleVal, setAngleVal] = useState(\"0\");\n    const [longueurVal, setLongueurVal] = useState(\"2000\");\n\n    // Déviation et Déclinaison\n    const [deviation, setDeviation] = useState(\"0\");\n    const [declinaison, setDeclinaison] = useState(\"0\");\n\n    // Donnée pour tracer le trait\n    const [drawLineData, setDrawLineData] = useState({\n        x1: 0,\n        y1: 0,\n        r: 0,\n        angle: 0 - DEFAULT_ANGLE\n    });\n\n    const amerCanvasRef = useRef(null);\n    useEffect(() => {\n        if (mapArray.length) {\n            const amerCanvas = amerCanvasRef.current;\n\n            amerCanvas.height = mapArray.length * 256;\n            amerCanvas.width = mapArray[0].length * 256;\n        }\n    }, [mapArray]);\n\n    // Récupérer coordonnées clique\n    /**\n     *\n     */\n    const drawLine = () => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.lineWidth = 5;\n        context.moveTo(drawLineData.x1, drawLineData.y1);\n        tabPoints.push(new Point(drawLineData.x1, drawLineData.y1));\n\n        context.lineTo(\n            drawLineData.x1 +\n                drawLineData.r *\n                    Math.cos((Math.PI * (drawLineData.angle + 180)) / 180),\n            drawLineData.y1 +\n                drawLineData.r *\n                    Math.sin((Math.PI * (drawLineData.angle + 180)) / 180)\n        );\n        tabPoints.push(\n            new Point(\n                drawLineData.x1 +\n                    drawLineData.r *\n                        Math.cos((Math.PI * drawLineData.angle) / 180),\n                drawLineData.y1 +\n                    drawLineData.r *\n                        Math.sin((Math.PI * drawLineData.angle) / 180)\n            )\n        );\n\n        context.stroke();\n    };\n\n    const drawPoint = (x, y, color) => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.fillStyle = color || \"black\";\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI, true);\n        context.fill();\n    };\n\n    /**\n     *\n     */\n    // Règle de cras\n    // Pour obtenir le milieu de la règle : -(regle.width / 2)\n    // Pour obtenir le point 0 du rapporteur (rouge) : CALIBRAGE_ZERO_ROUGE * regle.height\n    // Pour obtenir le point 0 du rapporteur (noir) : CALIBRAGE_ZERO_NOIR * regle.height\n    const drawAndPlaceCRA = () => {\n        // var regle = document.createElement('img');\n        var regle = new Image();\n        regle.src = image;\n        regle.alt = \"alt text\";\n\n        const context = amerCanvasRef.current.getContext(\"2d\");\n\n        regle.onload = function () {\n            context.save();\n            context.translate(drawLineData.x1, drawLineData.y1);\n            context.rotate(degToRadian(angleVal - DEFAULT_ANGLE));\n\n            if (angleVal >= 180) {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            } else {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            }\n\n            context.restore();\n        };\n\n        const x1 = drawLineData.x1;\n        const y1 = drawLineData.y1 - CALIBRAGE_ZERO_NOIR * regle.height;\n        //clearCRA(x1,y1);\n        context.clearRect(\n            0,\n            0,\n            amerCanvasRef.current.width,\n            amerCanvasRef.current.height\n        );\n\n        /*  context.moveTo(0,y1);\n        context.lineTo(mapArray[0].length*256,y1);\n\n        */ context.stroke();\n        nbrTrait++;\n\n        if (nbrTrait >= 3) {\n            trouverMilieu();\n        }\n    };\n\n    const trouverMilieu = () => {\n        let pt1 = tabPoints[0];\n        let pt2 = tabPoints[1];\n\n        let pt3 = tabPoints[2];\n        let pt4 = tabPoints[3];\n\n        let pt5 = tabPoints[4];\n        let pt6 = tabPoints[5];\n\n        let line1 = new Line(pt1, pt2);\n        let line2 = new Line(pt3, pt4);\n        let line3 = new Line(pt5, pt6);\n        // get intersection\n        let pt_intersection1 = line1.getIntersection(line2);\n        let pt_intersection2 = line1.getIntersection(line3);\n        let pt_intersection3 = line2.getIntersection(line3);\n\n        let line_median1 = pt_intersection1.getMedian(\n            pt_intersection2,\n            pt_intersection3\n        );\n        let line_median2 = pt_intersection2.getMedian(\n            pt_intersection1,\n            pt_intersection3\n        );\n        let line_median3 = pt_intersection3.getMedian(\n            pt_intersection1,\n            pt_intersection2\n        );\n\n        // middle\n        let middle1 = line_median1.getIntersection(line_median2);\n        console.log(`middle : x=${middle1.x}, y=${middle1.y}`);\n\n        const xtab = mapArray[0].length * 256;\n        const ytab = mapArray.length * 256;\n\n        // Dessiner point intersection + Label avec coordonnées\n        drawPoint(middle1.x, middle1.y, \"red\");\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.beginPath();\n        context.fillStyle = \"#000000\";\n        context.rect(middle1.x, middle1.y, 160, 25);\n        context.fill();\n        context.fillStyle = \"#FFFFFF\";\n        context.fillText(\n            temp(middle1.x, middle1.y, xtab, ytab),\n            middle1.x + 10,\n            middle1.y + 20\n        );\n\n        console.log(temp(middle1.x, middle1.y, xtab, ytab));\n    };\n\n    /**\n     *\n     * @param {L'évènement} event\n     */\n    const setCoordinates = (event) => {\n        setShow(true);\n        const rect = amerCanvasRef.current.getBoundingClientRect();\n        setDrawLineData({\n            ...drawLineData,\n            x1: event.clientX - rect.left,\n            y1: event.clientY - rect.top,\n            r: longueurVal\n        });\n        //temp(event,rect);\n    };\n    const temp = (x, y, xtab, ytab) => {\n        //const xtab = mapArray[0].length*256;\n        //const ytab = mapArray.length*256;\n\n        const latitude = mapSettingsData.latitude;\n        const longitude = mapSettingsData.longitude;\n        const latitudeDistance = mapSettingsData.latitudeDistance;\n        const longitudeDistance = mapSettingsData.longitudeDistance;\n\n        const {\n            decimalDegreLatitude,\n            decimalDegreLongitude,\n            decimalDegreLatitudeDistance,\n            decimalDegreLongitudeDistance\n        } = convertToDecimalDegre(\n            latitude,\n            longitude,\n            latitudeDistance,\n            longitudeDistance\n        );\n\n        const xCent = xtab / 2;\n        const yCent = ytab / 2;\n\n        const x2 = decimalDegreLongitude + decimalDegreLongitudeDistance;\n        const x1 = decimalDegreLongitude - decimalDegreLongitudeDistance;\n\n        const y2 = decimalDegreLatitude - decimalDegreLatitudeDistance;\n        const y1 = decimalDegreLatitude + decimalDegreLongitudeDistance;\n        const resX = (x / xtab) * (x2 - x1) + x1;\n        const resY = (y / ytab) * (y2 - y1) + y1;\n\n        return deg_to_dms(resX, true) + \"   \" + deg_to_dms(resY, false);\n    };\n    useEffect(() => {\n        if (amerCanvasRef) {\n            amerCanvasRef.current.addEventListener(\"mousemove\", (e) => {\n                if (\n                    mapArray.length > 1 &&\n                    (e.clientX % 2 === 0 || e.clientY % 2 === 0)\n                ) {\n                    const rect = amerCanvasRef.current.getBoundingClientRect();\n\n                    const xtab = mapArray[0].length * 256;\n                    const ytab = mapArray.length * 256;\n                    const x = parseInt(Math.abs(e.clientX - rect.left));\n                    const y = parseInt(Math.abs(e.clientY - rect.top));\n                    var label = document.getElementById(\"coordTest\");\n                    label.innerHTML = \"&nbsp;\" + temp(x, y, xtab, ytab);\n                }\n            });\n        }\n    });\n\n    useEffect(() => {\n        setDrawLineData({\n            ...drawLineData,\n            angle:\n                parseInt(angleVal, 10) +\n                parseInt(deviation, 10) +\n                parseInt(declinaison, 10) -\n                DEFAULT_ANGLE\n        });\n    }, [angleVal]);\n\n    useEffect(() => {\n        setDrawLineData({ ...drawLineData, r: longueurVal });\n    }, [longueurVal]);\n\n    const handleOnSubmit = (event) => {\n        drawLine();\n        drawAndPlaceCRA();\n        handleClose();\n    };\n\n    return (\n        <>\n            <canvas\n                id=\"canvas\"\n                ref={amerCanvasRef}\n                className=\"canvas-style mt-5\"\n                onClick={(e) => !!amer && setCoordinates(e)}\n            ></canvas>\n\n            <Modal show={show} onHide={handleClose} size=\"sm\" centered>\n                <Modal.Header>\n                    <Modal.Title>Relever l'amer</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Label htmlFor=\"angle\">Angle</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"angle\"\n                        value={angleVal}\n                        onChange={(e) => setAngleVal(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Angle\"\n                    />\n                    <Form.Label htmlFor=\"longueur\">Longueur</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"longueur\"\n                        value={longueurVal}\n                        onChange={(e) => setLongueurVal(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Longueur\"\n                    />\n                    <Form.Label htmlFor=\"declinaison\">\n                        Déclinaison (D)\n                    </Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"declinaison\"\n                        value={declinaison}\n                        onChange={(e) => setDeclinaison(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Déclinaison\"\n                    />\n                    <Form.Label htmlFor=\"deviation\">Déviation (d)</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"deviation\"\n                        value={deviation}\n                        onChange={(e) => setDeviation(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Déviation\"\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Annuler\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleOnSubmit}>\n                        Valider le marquage\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n","import \"./SeaMap.css\";\nimport React, { useRef } from \"react\";\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nimport { deg_to_dms } from \"../helpers/GenerateMap\";\n\n// Grille\nconst drawLine = (tableRef, canvasGraticuleRef, mapSettingsData, mapArray) => {\n    const context = canvasGraticuleRef.current.getContext(\"2d\");\n    const canvasGraticule = canvasGraticuleRef.current;\n\n    const latitude = mapSettingsData.latitude;\n    const longitude = mapSettingsData.longitude;\n\n    const latitudeDistance = mapSettingsData.latitudeDistance;\n    const longitudeDistance = mapSettingsData.longitudeDistance;\n\n    const zoom = mapSettingsData.zoom;\n\n    const longitudeString =\n        longitude.deg +\n        \"° \" +\n        longitude.min +\n        \"' \" +\n        longitude.sec +\n        '\" ' +\n        longitude.orientation;\n\n    const {\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    } = convertToDecimalDegre(\n        latitude,\n        longitude,\n        latitudeDistance,\n        longitudeDistance\n    );\n\n    const diffDegLongitude =\n        decimalDegreLongitude - decimalDegreLongitudeDistance;\n    const diffDegLatitude = decimalDegreLatitude + decimalDegreLatitudeDistance;\n\n    canvasGraticule.height = mapArray.length * 256;\n    canvasGraticule.width = mapArray[0].length * 256;\n\n    var height = mapArray.length * 256;\n    var width = mapArray[0].length * 256;\n\n    context.setLineDash([15, 5]);\n\n    var coordCentX = width / 2;\n    var coordCentY = height / 2;\n\n    var coordEstX = width;\n    var coordEstY = height / 2;\n\n    var coordOuestX = 0;\n    var coordOuestY = height / 2;\n\n    var coordNordX = width / 2;\n    var coordNordY = 0;\n\n    var coordSudX = width / 2;\n    var coordSudY = height;\n\n    for (\n        var i = coordCentX;\n        i <= coordEstX;\n        i += (coordEstX - coordCentX) / 6\n    ) {\n        context.moveTo(i, 0);\n        context.lineTo(i, height);\n        context.stroke();\n    }\n\n    for (\n        var i = coordOuestX;\n        i <= coordCentX;\n        i += (coordEstX - coordCentX) / 6\n    ) {\n        context.moveTo(i, 0);\n        context.lineTo(i, height);\n        context.stroke();\n    }\n    for (\n        var i = coordCentY;\n        i <= coordSudY;\n        i += (coordSudY - coordCentY) / 6\n    ) {\n        context.moveTo(0, i);\n        context.lineTo(width, i);\n        context.stroke();\n    }\n\n    for (\n        var i = coordNordY;\n        i <= coordCentY;\n        i += (coordSudY - coordCentY) / 6\n    ) {\n        context.moveTo(0, i);\n        context.lineTo(width, i);\n        context.stroke();\n    }\n};\n\nexport const SeaMap = (props) => {\n    const { mapArray, mapSettingsData, isStoredMap, storedMapName } = props;\n\n    //Ref\n    const tableRef = useRef(null);\n    const canvasGraticuleRef = useRef(null);\n\n    return (\n        <div>\n            <table\n                id=\"map\"\n                ref={tableRef}\n                className=\"mt-5\"\n                cellSpacing=\"0\"\n                cellPadding=\"0\"\n                style={{ border: \"none\" }}\n            >\n                <tbody>\n                    {mapArray.map((row, rowIndex) => {\n                        return (\n                            <tr key={rowIndex}>\n                                {row.map((cell, cellIndex) => {\n                                    if (\n                                        cellIndex === row.length - 1 &&\n                                        rowIndex === mapArray.length - 1\n                                    ) {\n                                        drawLine(\n                                            tableRef,\n                                            canvasGraticuleRef,\n                                            mapSettingsData,\n                                            mapArray\n                                        );\n                                    }\n                                    return (\n                                        <td\n                                            className=\"mapArrayCell\"\n                                            key={cellIndex}\n                                        >\n                                            <img\n                                                alt=\"\"\n                                                src={`https://a.tile.openstreetmap.fr/osmfr/${cell[0]}/${cell[1]}/${cell[2]}.png`}\n                                            />\n                                            <img\n                                                alt=\"\"\n                                                className=\"overlayed\"\n                                                src={`https://tiles.openseamap.org/seamark/${cell[0]}/${cell[1]}/${cell[2]}.png`}\n                                            />\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <canvas\n                ref={canvasGraticuleRef}\n                className=\"canvas-style-gaticule mt-5\"\n            ></canvas>\n        </div>\n    );\n};\n","import {\n    Button,\n    Navbar,\n    OverlayTrigger,\n    Tooltip,\n    Toast\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faLifeRing,\n    faMapMarkedAlt,\n    faPencilRuler,\n    faQuestion,\n    faSave\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./TopBar.css\";\n\nconst renderTooltip = (title) => <Tooltip id=\"button-tooltip\">{title}</Tooltip>;\n\nexport const TopBar = (props) => {\n    const { setShowSettings, setShowLoadMap, amerState } = props;\n    const [amer, setAmer] = amerState;\n\n    const handleShowSettings = () => setShowSettings(true);\n    const handleShowLoadMap = () => setShowLoadMap(true);\n    const handleAmerState = () => setAmer(!amer);\n\n    return (\n        <>\n            <Navbar\n                sticky=\"top\"\n                className=\"navbar-dark\"\n                style={{ position: \"fixed\", width: \"100%\" }}\n                bg=\"dark\"\n            >\n                <div className=\"topbar-container\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        &nbsp;&nbsp;Assistance Navigation Maritime\n                    </a>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Gérer les coordonnées\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            disabled={!navigator.onLine}\n                            onClick={navigator.onLine && handleShowSettings}\n                        >\n                            <FontAwesomeIcon icon={faMapMarkedAlt} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Charger une carte\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleShowLoadMap}\n                        >\n                            <FontAwesomeIcon icon={faSave} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Placer un amer\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleAmerState}\n                        >\n                            <FontAwesomeIcon icon={faLifeRing} size=\"lg\" />\n                            {!!amer ? \" ON\" : \" OFF\"}\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Tracer une route\")}\n                    >\n                        <Button variant=\"primary\" className=\"spacedButton\">\n                            <FontAwesomeIcon icon={faPencilRuler} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <label\n                        className=\"ml-auto\"\n                        style={{ color: \"red\" }}\n                        id=\"coordTest\"\n                    ></label>\n                </div>\n            </Navbar>\n        </>\n    );\n};\n","import { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { isBetween } from \"../../helpers/helpers\";\nimport { generateMapArray } from \"../../helpers/GenerateMap\";\n\nexport const SettingsModal = (props) => {\n    const {\n        show,\n        setMapArray,\n        mapNameState,\n        savedMapsState,\n        mapSettingsDataState,\n        setIsStoredMap\n    } = props;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [showSettings, setShowSettings] = show;\n    const [mapName, setMapName] = mapNameState;\n\n    // Latitude\n    const [latDeg, setLatDeg] = useState(\"47\");\n    const [latMin, setLatMin] = useState(\"25\");\n    const [latSec, setLatSec] = useState(\"0\");\n    const [latRad, setLatRad] = useState(\"N\");\n\n    // Longitude\n    const [lonDeg, setLonDeg] = useState(\"2\");\n    const [lonMin, setLonMin] = useState(\"50\");\n    const [lonSec, setLonSec] = useState(\"0\");\n    const [lonRad, setLonRad] = useState(\"O\");\n\n    // Distance Longitude\n    const [lonDistDeg, setLonDistDeg] = useState(\"0\");\n    const [lonDistMin, setLonDistMin] = useState(\"15\");\n\n    // Distance Latitude\n    const [latDistDeg, setLatDistDeg] = useState(\"0\");\n    const [latDistMin, setLatDistMin] = useState(\"15\");\n\n    // Footer\n    const [mapZoom, setMapZoom] = useState(\"13\");\n\n    const handleCloseSettings = () => setShowSettings(false);\n    const applySettings = () => {\n        if (!savedMaps.find((savedMap) => savedMap.data.name === mapName)) {\n            const mapArray = generateMapArray({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom)\n            });\n            setIsStoredMap(false);\n            setMapSettingsData({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom),\n                name: mapName\n            });\n            setMapArray(mapArray);\n            setSavedMaps([\n                ...savedMaps,\n                { data: mapSettingsData, tiles: mapArray }\n            ]);\n            setShowSettings(false);\n        } else {\n            alert(\"Une carte possédant ce nom existe déjà\");\n        }\n    };\n\n    return (\n        <Modal show={showSettings} onHide={handleCloseSettings} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Gestion des coordonnées</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapName\">\n                            Nom de la carte :\n                        </label>\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            id=\"mapName\"\n                            value={mapName}\n                            onChange={(e) => setMapName(e.target.value)}\n                        />\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Coordonnées Latitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDeg\"\n                                value={latDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -90, 90) &&\n                                    setLatDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latMin\"\n                                value={latMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latSec\"\n                                value={latSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <div\n                            name=\"latitude\"\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioN\"\n                                value=\"N\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"N\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioN\"\n                            >\n                                Nord\n                            </label>\n\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioS\"\n                                value=\"S\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"S\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioS\"\n                            >\n                                Sud\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Coordonnées Longitude :</label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDeg\"\n                                value={lonDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -180, 180) &&\n                                    setLonDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonMin\"\n                                value={lonMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonSec\"\n                                value={lonSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <div\n                            className=\"btn-group\"\n                            name=\"latitude\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioE\"\n                                value=\"E\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"E\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioE\"\n                            >\n                                Est\n                            </label>\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioO\"\n                                value=\"O\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"O\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioO\"\n                            >\n                                Ouest\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Rayon Latitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistDeg\"\n                                value={latDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -45, 45) &&\n                                    setLatDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistMin\"\n                                value={latDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Rayon Longitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistDeg\"\n                                value={lonDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -90, 90) &&\n                                    setLonDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistMin\"\n                                value={lonDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapZoom\">\n                            Zoom :\n                        </label>\n                        <select\n                            className=\"form-control\"\n                            id=\"mapZoom\"\n                            value={mapZoom}\n                            onChange={(e) => setMapZoom(e.target.value)}\n                        >\n                            <option value=\"10\">1:500 000</option>\n                            <option value=\"11\">1:250 000</option>\n                            <option value=\"12\">1:150 000</option>\n                            <option value=\"13\">1:70 000</option>\n                            <option value=\"14\">1:35 000</option>\n                            <option value=\"15\">1:15 000</option>\n                            <option value=\"16\">1:8 000</option>\n                            <option value=\"17\">1:4 000</option>\n                            <option value=\"18\">1:2 000</option>\n                        </select>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseSettings}>\n                    Annuler\n                </Button>\n                <Button variant=\"success\" onClick={applySettings}>\n                    Valider\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { Modal, Button, Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\n\nexport const LoadMapModal = (props) => {\n    const {\n        show,\n        mapArrayState,\n        mapNameState,\n        savedMapsState,\n        isStoredMapState,\n        storedMapState,\n        mapSettingsDataState\n    } = props;\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n    const [mapName, setMapName] = mapNameState;\n    const [mapArray, setMapArray] = mapArrayState;\n    const [showLoadMap, setShowLoadMap] = show;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [storedMapName, setStoredMapName] = storedMapState;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [currentlySelectedMapName, setCurrentlySelectedMapName] =\n        useState(\"\");\n    const handleCloseLoadMap = () => setShowLoadMap(false);\n\n    const handleValidate = () => {\n        if (currentlySelectedMapName) {\n            const selectedMapIndex = savedMaps.find(\n                (map) => map.data.name === currentlySelectedMapName\n            );\n            if (selectedMapIndex) {\n                setMapArray(savedMaps[selectedMapIndex].tiles);\n                setMapSettingsData(savedMaps[selectedMapIndex].data);\n            }\n            handleCloseLoadMap();\n        }\n    };\n\n    return (\n        <Modal show={showLoadMap} onHide={handleCloseLoadMap} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Charger une carte</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Nom</Form.Label>\n                        <Form.Control\n                            disabled={!savedMaps.length}\n                            as=\"select\"\n                            value={currentlySelectedMapName}\n                            onChange={(e) =>\n                                setCurrentlySelectedMapName(e.target.value)\n                            }\n                        >\n                            <option selected></option>\n                            {savedMaps.length &&\n                                savedMaps.map((currMap) => (\n                                    <option value={currMap.data.name}>\n                                        {currMap.data.name}\n                                    </option>\n                                ))}\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseLoadMap}>\n                    Annuler\n                </Button>\n                <Button\n                    variant=\"success\"\n                    disabled={!savedMaps.length || !currentlySelectedMapName}\n                    onClick={handleValidate}\n                >\n                    Valider Carte\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { useState, useEffect } from \"react\";\nimport { SettingsModal } from \"./Modals/SettingsModal\";\nimport { LoadMapModal } from \"./Modals/LoadMapModal\";\n\nexport const Modals = (props) => {\n    const {\n        settingsModal,\n        loadMapModal,\n        mapArrayState,\n        isStoredMapState,\n        mapSettingsDataState,\n        mapNameState,\n        storedMapState\n    } = props;\n    const [mapName, setMapName] = mapNameState;\n    const [savedMaps, setSavedMaps] = useState([]);\n    const [mapArray, setMapArray] = mapArrayState;\n    const [hasLoadedMapDir, setHasLoadedMapDir] = useState(false);\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n\n    return (\n        <>\n            <LoadMapModal\n                show={loadMapModal}\n                mapArrayState={[mapArray, setMapArray]}\n                isStoredMapState={isStoredMapState}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                storedMapState={storedMapState}\n                mapSettingsDataState={mapSettingsDataState}\n            />\n            <SettingsModal\n                mapSettingsDataState={mapSettingsDataState}\n                show={settingsModal}\n                setMapArray={setMapArray}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                setIsStoredMap={setIsStoredMap}\n            />\n        </>\n    );\n};\n","import { Canvas } from \"./components/Canvas\";\nimport { SeaMap } from \"./components/SeaMap\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Modals } from \"./components/Modals\";\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport const App = () => {\n    const [showSettings, setShowSettings] = useState(false);\n    const [showLoadMap, setShowLoadMap] = useState(false);\n    const [mapArray, setMapArray] = useState([]);\n    const [isStoredMap, setIsStoredMap] = useState(true);\n    const [mapSettingsData, setMapSettingsData] = useState({});\n    const [mapName, setMapName] = useState(\"Baie de Quiberon\");\n    const [storedMapName, setStoredMapName] = useState(\"\");\n    const [amer, setAmer] = useState(false);\n    const [hasScrollListener, setHasScrollListener] = useState(false);\n\n    useEffect(() => {\n        const ele = document.getElementById(\"dragMap\");\n        if (!hasScrollListener) {\n            let x = 0;\n            let y = 0;\n            let html = document.documentElement;\n            const mouseDownHandler = (e) => {\n                x = e.clientX;\n                y = e.clientY;\n                document.addEventListener(\"mousemove\", mouseMoveHandler);\n                document.addEventListener(\"mouseup\", mouseUpHandler);\n                if (!amer) {\n                    ele.style.cursor = \"grabbing\";\n                    ele.style.userSelect = \"none\";\n                }\n            };\n\n            const mouseMoveHandler = (e) => {\n                if (!amer) {\n                    let dx = e.clientX - x;\n                    let dy = e.clientY - y;\n                    if (\n                        (ele.offsetLeft > 0 && dx > 0) ||\n                        (html.scrollWidth === html.clientWidth && dx < 0)\n                    ) {\n                        dx = 0;\n                    }\n                    if (\n                        (ele.offsetTop > 0 && dy > 0) ||\n                        (html.scrollHeight === html.clientHeight && dy < 0)\n                    ) {\n                        dy = 0;\n                    }\n\n                    ele.style.top = `${ele.offsetTop + dy}px`;\n                    ele.style.left = `${ele.offsetLeft + dx}px`;\n                    x = e.clientX;\n                    y = e.clientY;\n                }\n            };\n\n            const mouseUpHandler = () => {\n                document.removeEventListener(\"mousemove\", mouseMoveHandler);\n                document.removeEventListener(\"mouseup\", mouseUpHandler);\n                if (!amer) {\n                    ele.style.cursor = \"grab\";\n                    ele.style.removeProperty(\"user-select\");\n                }\n            };\n            setHasScrollListener(true);\n            ele.addEventListener(\"mousedown\", mouseDownHandler);\n        }\n    });\n\n    return (\n        <>\n            <TopBar\n                setShowSettings={setShowSettings}\n                setShowLoadMap={setShowLoadMap}\n                amerState={[amer, setAmer]}\n            />\n            <Modals\n                settingsModal={[showSettings, setShowSettings]}\n                loadMapModal={[showLoadMap, setShowLoadMap]}\n                isStoredMapState={[isStoredMap, setIsStoredMap]}\n                mapArrayState={[mapArray, setMapArray]}\n                mapSettingsDataState={[mapSettingsData, setMapSettingsData]}\n                mapNameState={[mapName, setMapName]}\n                storedMapState={[storedMapName, setStoredMapName]}\n            />\n            <div id=\"dragMap\" className={!!amer ? \"amerPointer\" : \"draggable\"}>\n                <SeaMap\n                    mapArray={mapArray}\n                    isStoredMap={isStoredMap}\n                    mapSettingsData={mapSettingsData}\n                    storedMapName={storedMapName}\n                />\n                <Canvas\n                    amer={amer}\n                    mapArray={mapArray}\n                    mapSettingsData={mapSettingsData}\n                />\n            </div>\n        </>\n    );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nif (window.cordova) {\n    document.addEventListener(\n        \"deviceready\",\n        () => {\n            renderReactDom();\n        },\n        false\n    );\n} else {\n    renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}