{"version":3,"sources":["regle-cras.png","helpers/helpers.js","components/Canvas.jsx","helpers/GenerateMap.js","components/SeaMap.jsx","components/TopBar.jsx","components/Modals/SettingsModal.jsx","components/Modals/LoadMapModal.jsx","components/Modals.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["isBetween","value","lower","higher","Canvas","props","mapArray","amer","useState","show","setShow","handleClose","angleVal","setAngleVal","longueurVal","setLongueurVal","deviation","setDeviation","declinaison","setDeclinaison","x1","y1","r","angle","drawLineData","setDrawLineData","amerCanvasRef","useRef","useEffect","length","amerCanvas","current","height","width","drawAndPlaceCRA","regle","Image","src","image","alt","context","getContext","onload","save","translate","rotate","Math","PI","drawImage","restore","parseInt","id","ref","className","onClick","e","event","rect","getBoundingClientRect","clientX","left","clientY","top","setCoordinates","Modal","onHide","size","centered","Header","Title","Body","Form","Label","htmlFor","Control","onChange","target","type","placeholder","Footer","Button","variant","moveTo","lineTo","cos","sin","stroke","drawLine","getCenterTile","zoom","degLatitude","degLongitude","degLatDist","degLongDist","asinh","tan","getBeginLastTile","beginLatDegree","beginLongDegree","lastLatDegree","lastLongDegree","convertToDecimalDegre","latitude","longitude","latitudeDistance","longitudeDistance","decimalDegreLatitude","deg","min","sec","decimalDegreLongitude","decimalDegreLatitudeDistance","decimalDegreLongitudeDistance","orientation","generateTileArray","centerTileCoords","beginLastCoords","beginLatTile","beginLongTile","lastLatTile","lastLongTile","sizeLatitude","sizeLongitude","tileArray","Array","map","i","j","deg_to_dms","dd","isLng","dir","absDd","abs","frac","round","SeaMap","mapSettingsData","isStoredMap","storedMapName","tableRef","canvasGraticuleRef","cellSpacing","cellPadding","style","border","row","rowIndex","cell","cellIndex","canvasGraticule","diffDegLongitude","diffDegLatitude","longitudeDegDepart","font","fillText","latitudeDegDepart","renderTooltip","title","Tooltip","TopBar","setShowSettings","setShowLoadMap","amerState","setAmer","Navbar","sticky","position","bg","href","OverlayTrigger","placement","overlay","disabled","navigator","onLine","icon","faMapMarkedAlt","faSave","faLifeRing","faPencilRuler","faQuestion","SettingsModal","setMapArray","mapNameState","savedMapsState","setMapSettingsData","setIsStoredMap","savedMaps","setSavedMaps","showSettings","mapName","setMapName","latDeg","setLatDeg","latMin","setLatMin","latSec","setLatSec","latRad","setLatRad","lonDeg","setLonDeg","lonMin","setLonMin","lonSec","setLonSec","lonRad","setLonRad","lonDistDeg","setLonDistDeg","lonDistMin","setLonDistMin","latDistDeg","setLatDistDeg","latDistMin","setLatDistMin","mapZoom","setMapZoom","handleCloseSettings","noValidate","name","role","aria-label","autoComplete","checked","find","savedMap","alert","data","generateMapArray","fs","window","require","request","LoadMapModal","mapArrayState","isStoredMapState","storedMapState","mapSettingsDataState","showLoadMap","setStoredMapName","currentlySelectedMapName","setCurrentlySelectedMapName","handleCloseLoadMap","download","uri","filename","head","pipe","createWriteStream","a","data_file","content_file","JSON","stringify","mkdir","writeFile","saveCurrentMap","Group","as","selected","currMapName","dataFilePath","readFile","err","latSize","split","lonSize","parse","newMapArray","Modals","settingsModal","loadMapModal","hasLoadedMapDir","setHasLoadedMapDir","localMapArray","readdir","_","fileList","forEach","file","push","loadStoredMaps","App","hasScrollListener","setHasScrollListener","ele","document","getElementById","x","y","html","documentElement","mouseMoveHandler","dx","dy","offsetLeft","scrollWidth","clientWidth","offsetTop","scrollHeight","clientHeight","mouseUpHandler","removeEventListener","cursor","removeProperty","addEventListener","userSelect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","console","log","renderReactDom","ReactDOM","render","cordova"],"mappings":"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","file":"static/js/main.295dc014.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/regle-cras.38c0b4c7.png\";","export const isBetween = (value, lower, higher) => value >= lower && value <= higher;\nexport const degToRadian = (degrees) => { return degrees * (Math.PI / 180); }","import \"./Canvas.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport image from \"../regle-cras.png\";\nimport { degToRadian } from \"../helpers/helpers\";\n\n// Valeur pour prendre le nord en référence comme 0°\nconst DEFAULT_ANGLE = 90;\nconst CALIBRAGE_ZERO_ROUGE = -0.0845;\nconst CALIBRAGE_ZERO_NOIR = -0.9155;\n\nexport const Canvas = (props) => {\n    const { mapArray, amer } = props;\n\n    //Modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n    // Angle et Longueur\n    const [angleVal, setAngleVal] = useState(\"0\");\n    const [longueurVal, setLongueurVal] = useState(\"200\");\n\n    // Déviation et Déclinaison\n    const [deviation, setDeviation] = useState(\"0\");\n    const [declinaison, setDeclinaison] = useState(\"0\");\n\n    // Donnée pour tracer le trait\n    const [drawLineData, setDrawLineData] = useState({\n        x1: 0,\n        y1: 0,\n        r: 0,\n        angle: 0 - DEFAULT_ANGLE\n    });\n\n    const amerCanvasRef = useRef(null);\n    useEffect(() => {\n        if (mapArray.length) {\n            const amerCanvas = amerCanvasRef.current;\n\n            amerCanvas.height = mapArray.length * 256;\n            amerCanvas.width = mapArray[0].length * 256;\n        }\n    }, [mapArray]);\n\n    // Récupérer coordonnées clique\n    /**\n     *\n     */\n    const drawLine = () => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.moveTo(drawLineData.x1, drawLineData.y1);\n        context.lineTo(\n            drawLineData.x1 +\n                drawLineData.r * Math.cos((Math.PI * drawLineData.angle) / 180),\n            drawLineData.y1 +\n                drawLineData.r * Math.sin((Math.PI * drawLineData.angle) / 180)\n        );\n        context.stroke();\n    };\n\n    const drawPoint = (x, y, color) => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.fillStyle = color || \"black\";\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI, true);\n        context.fill();\n    };\n\n    /**\n     *\n     */\n    // Règle de cras\n    // Pour obtenir le milieu de la règle : -(regle.width / 2)\n    // Pour obtenir le point 0 du rapporteur (rouge) : CALIBRAGE_ZERO_ROUGE * regle.height\n    // Pour obtenir le point 0 du rapporteur (noir) : CALIBRAGE_ZERO_NOIR * regle.height\n    const drawAndPlaceCRA = () => {\n        // var regle = document.createElement('img');\n        var regle = new Image();\n        regle.src = image;\n        regle.alt = \"alt text\";\n\n        const context = amerCanvasRef.current.getContext(\"2d\");\n\n        regle.onload = function () {\n            context.save();\n            context.translate(drawLineData.x1, drawLineData.y1);\n            context.rotate(degToRadian(angleVal - DEFAULT_ANGLE));\n\n            if (angleVal >= 180) {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            } else {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            }\n\n            context.restore();\n        };\n    };\n\n    useEffect(() => {\n        setDrawLineData({\n            ...drawLineData,\n            angle:\n                parseInt(angleVal, 10) +\n                parseInt(deviation, 10) +\n                parseInt(declinaison, 10) -\n                DEFAULT_ANGLE\n        });\n    }, [angleVal]);\n\n    useEffect(() => {\n        setDrawLineData({ ...drawLineData, r: longueurVal });\n    }, [longueurVal]);\n\n    const handleOnSubmit = (event) => {\n        drawLine();\n        drawAndPlaceCRA();\n        handleClose();\n    };\n\n    /**\n     *\n     * @param {L'évènement} event\n     */\n    const setCoordinates = (event) => {\n        setShow(true);\n        const rect = amerCanvasRef.current.getBoundingClientRect();\n        setDrawLineData({\n            ...drawLineData,\n            x1: event.clientX - rect.left,\n            y1: event.clientY - rect.top,\n            r: longueurVal\n        });\n    };\n\n    return (\n        <>\n            <canvas\n                id=\"canvas\"\n                ref={amerCanvasRef}\n                className=\"canvas-style mt-5\"\n                onClick={(e) => !!amer && setCoordinates(e)}\n            ></canvas>\n\n            <Modal show={show} onHide={handleClose} size=\"sm\" centered>\n                <Modal.Header>\n                    <Modal.Title>Relever l'amer</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Label htmlFor=\"angle\">Angle</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"angle\"\n                        value={angleVal}\n                        onChange={(e) => setAngleVal(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Angle\"\n                    />\n                    <Form.Label htmlFor=\"longueur\">Longueur</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"longueur\"\n                        value={longueurVal}\n                        onChange={(e) => setLongueurVal(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Longueur\"\n                    />\n                    <Form.Label htmlFor=\"declinaison\">\n                        Déclinaison (D)\n                    </Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"declinaison\"\n                        value={declinaison}\n                        onChange={(e) => setDeclinaison(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Déclinaison\"\n                    />\n                    <Form.Label htmlFor=\"deviation\">Déviation (d)</Form.Label>\n                    <Form.Control\n                        className=\"mb-2 mr-sm-2\"\n                        id=\"deviation\"\n                        value={deviation}\n                        onChange={(e) => setDeviation(e.target.value)}\n                        type=\"number\"\n                        placeholder=\"Déviation\"\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Annuler\n                    </Button>\n                    <Button variant=\"primary\" onClick={handleOnSubmit}>\n                        Valider le marquage\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n","export const generateMapArray = (data) => {\n    const { latitude, longitude, latitudeDistance, longitudeDistance, zoom, size } = data;\n\n\n    const { decimalDegreLatitude, decimalDegreLongitude, decimalDegreLatitudeDistance, decimalDegreLongitudeDistance } =\n        convertToDecimalDegre(latitude, longitude,latitudeDistance, longitudeDistance);\n\n\n    const centerTileCoords = getCenterTile(\n        zoom,\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    );\n\n    const beginLastCoords = getBeginLastTile(\n        zoom,\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    );\n    \n    return generateTileArray(centerTileCoords, beginLastCoords, zoom, size);\n};\n\n/**\n * Fonction permettant de convertir des degrés en numéro de la Tile centrale pour préparer\n * les appels à l'API OpenStreetMap et OpenSeaMap\n * @param {Le zoom que l'on veut appliquer à la carte} zoom\n * @param {Le degré de latitude} degLatitude\n * @param {Le degré de longitude} degLongitude\n * @returns Un tableau avec les 2 paramètres nécessaires aux appels l'API OpenStreetMap et OpenSeaMap\n */\nconst getCenterTile = (zoom, degLatitude, degLongitude, degLatDist, degLongDist) => [\n    parseInt(\n        ((1.0 - Math.asinh(Math.tan(degLatitude * (Math.PI / 180))) / Math.PI) /\n            2.0) *\n            2.0 ** zoom\n    ),\n    parseInt(((degLongitude + 180.0) / 360.0) * 2.0 ** zoom),\n    parseInt(\n        ((1.0 - Math.asinh(Math.tan(degLatDist * (Math.PI / 180))) / Math.PI) /\n            2.0) *\n            2.0 ** zoom\n    ),\n    parseInt(((degLongDist + 180.0) / 360.0) * 2.0 ** zoom)\n\n];\n\nconst getBeginLastTile = (zoom, degLatitude, degLongitude, degLatDist, degLongDist) => {\n\n  const beginLatDegree = degLatitude - degLatDist;\n  const beginLongDegree = degLongitude - degLongDist;\n\n  const lastLatDegree = degLatitude + degLatDist;\n  const lastLongDegree = degLongitude + degLongDist;\n\n\n\n  const beginLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(beginLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const beginLongTile = parseInt(((beginLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\n\n  const lastLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(lastLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const lastLongTile = parseInt(((lastLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\nreturn [beginLatTile, beginLongTile, lastLatTile, lastLongTile];\n};\n\n\n/**\n * Fonction permettant de convertir des DMS (Degré, Minutes, Secondes) en DD (Degré Decimaux)\n * @param {La latitude à convertir en DD} latitude\n * @param {La longitude à convertir en DD} longitude\n * @returns Les coordonnées DMS converties en DD\n */\nexport const convertToDecimalDegre = (latitude, longitude, latitudeDistance, longitudeDistance) => {\n    const decimalDegreLatitude =\n        parseInt(latitude.deg) +\n        (latitude.min * 60 + parseInt(latitude.sec)) / 3600;\n    const decimalDegreLongitude =\n        parseInt(longitude.deg) +\n        (longitude.min * 60 + parseInt(longitude.sec)) / 3600;\n\n    const decimalDegreLatitudeDistance =\n        parseInt(latitudeDistance.deg) +\n        (latitudeDistance.min * 60)/3600;\n\n    const decimalDegreLongitudeDistance =\n        parseInt(longitudeDistance.deg) +\n        (longitudeDistance.min * 60)/3600;\n\n\n    return {\n        decimalDegreLatitude:\n            latitude.orientation === \"S\"\n                ? -decimalDegreLatitude\n                : decimalDegreLatitude,\n        decimalDegreLongitude:\n            longitude.orientation === \"O\"\n                ? -decimalDegreLongitude\n                : decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n\n    };\n};\n\n/**\n * Créé le tableau contenant les coordonnées de toutes les tiles\n * @param {Les coordonnées de la taille centrale} centerTileCoords\n * @param {Le zoom de la carte} zoom\n * @param {La taille de la carte} size\n * @returns\n */\nconst generateTileArray = (centerTileCoords, beginLastCoords, zoom, size) => {\n\n\n\n    const beginLatTile = beginLastCoords[0];\n    const beginLongTile = beginLastCoords[1];\n\n    const lastLatTile = beginLastCoords[2];\n    const lastLongTile = beginLastCoords[3];\n\n    const sizeLatitude = beginLatTile - lastLatTile ;\n    const sizeLongitude = lastLongTile - beginLongTile ;\n\n    const tileArray = [...Array(sizeLatitude + 1)].map(() => Array(sizeLongitude + 1));\n\n    const latitudeDistance = (sizeLatitude / 2) >> 0;\n    const longitudeDistance = (sizeLongitude / 2) >> 0;\n\n\n\n    /*\n    const end = (size / 2) >> 0;\n    const start = size % 2 !== 0 ? -end : -(end - 1);\n    const add = size % 2 !== 0 ? end : Math.abs(start);\n    */\n    for (let i = beginLongTile; i <= lastLongTile; ++i){\n        for (let j = lastLatTile; j <= beginLatTile; ++j){\n            tileArray[j - lastLatTile][i - beginLongTile] = [\n                zoom,\n                 i,\n                 j\n            ];\n          }\n        }\n    return tileArray;\n};\n\n\nexport function deg_to_dms (dd, isLng) {\n  var dir = dd < 0\n     ? isLng ? 'O' : 'S'\n     : isLng ? 'E' : 'N';\n\n   var absDd = Math.abs(dd);\n   var deg = absDd | 0;\n   var frac = absDd - deg;\n   var min = (frac * 60) | 0;\n   var sec = frac * 3600 - min * 60;\n   // Round it to 2 decimal points.\n   sec = Math.round(sec * 100) / 100;\n   return deg + \"°\" + min + \"'\" + sec + '\"' + dir;\n}\n","import \"./SeaMap.css\";\nimport React, { useEffect, useRef } from \"react\";\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nimport { deg_to_dms } from \"../helpers/GenerateMap\";\n// Récupérer coordonnées clique\n/*const drawLine = (tableRef, canvasGraticuleRef, scrollContainerRef) => {\n    const context = canvasGraticuleRef.current.getContext(\"2d\");\n    const canvasGraticule = canvasGraticuleRef.current;\n    const scrollContainer = scrollContainerRef.current;\n\n    canvasGraticule.height = tableRef.current.offsetHeight;\n    canvasGraticule.width = tableRef.current.offsetWidth;\n    scrollContainer.height = tableRef.current.offsetHeight;\n    scrollContainer.width = tableRef.current.offsetWidth;\n\n    for (var i = 0; i < canvasGraticule.width; i += 150) {\n        context.moveTo(i, 0);\n        context.lineTo(i, canvasGraticule.height);\n        context.stroke();\n    }\n};*/\n\n// Grille\nconst drawLine = (tableRef, canvasGraticuleRef, mapSettingsData, mapArray) => {\n    const context = canvasGraticuleRef.current.getContext(\"2d\");\n    const canvasGraticule = canvasGraticuleRef.current;\n\n    const latitude = mapSettingsData.latitude;\n    const longitude = mapSettingsData.longitude;\n\n    const latitudeDistance = mapSettingsData.latitudeDistance;\n    const longitudeDistance = mapSettingsData.longitudeDistance;\n\n    const zoom = mapSettingsData.zoom;\n\n    const longitudeString =\n        longitude.deg +\n        \"° \" +\n        longitude.min +\n        \"' \" +\n        longitude.sec +\n        '\" ' +\n        longitude.orientation;\n\n    const {\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    } = convertToDecimalDegre(\n        latitude,\n        longitude,\n        latitudeDistance,\n        longitudeDistance\n    );\n\n    const diffDegLongitude =\n        decimalDegreLongitude - decimalDegreLongitudeDistance;\n    const diffDegLatitude = decimalDegreLatitude + decimalDegreLatitudeDistance;\n\n    canvasGraticule.height = mapArray.length * 256;\n    canvasGraticule.width = mapArray[0].length * 256;\n\n    var height = mapArray.length * 256;\n    var width = mapArray[0].length * 256;\n\n    var longitudeDegDepart = diffDegLongitude;\n    for (var i = 0; i < width; i += width / 2 / 6) {\n        context.moveTo(i, 0);\n        context.lineTo(i, height);\n        context.stroke();\n        context.font = \"15px Arial\";\n        context.fillText(deg_to_dms(longitudeDegDepart, true), i, 20);\n        longitudeDegDepart += decimalDegreLongitudeDistance / 6;\n    }\n\n    var latitudeDegDepart = diffDegLatitude;\n    for (var i = 0; i < height; i += height / 2 / 6) {\n        context.moveTo(0, i);\n        context.lineTo(width, i);\n        context.stroke();\n        context.font = \"15px Arial\";\n        context.fillText(deg_to_dms(latitudeDegDepart, false), 10, i);\n        latitudeDegDepart -= decimalDegreLatitudeDistance / 6;\n    }\n};\n\nexport const SeaMap = (props) => {\n    const { mapArray, mapSettingsData, isStoredMap, storedMapName } = props;\n\n    //Ref\n    const tableRef = useRef(null);\n    const canvasGraticuleRef = useRef(null);\n\n    return (\n        <div>\n            <table\n                id=\"map\"\n                ref={tableRef}\n                className=\"mt-5\"\n                cellSpacing=\"0\"\n                cellPadding=\"0\"\n                style={{ border: \"none\" }}\n            >\n                <tbody>\n                    {mapArray.map((row, rowIndex) => {\n                        return (\n                            <tr key={rowIndex}>\n                                {row.map((cell, cellIndex) => {\n                                    if (\n                                        cellIndex == row.length - 1 &&\n                                        rowIndex == mapArray.length - 1\n                                    ) {\n                                        drawLine(\n                                            tableRef,\n                                            canvasGraticuleRef,\n                                            mapSettingsData,\n                                            mapArray\n                                        );\n                                    }\n                                    return (\n                                        <td\n                                            className=\"mapArrayCell\"\n                                            key={cellIndex}\n                                        >\n                                            <img\n                                                alt=\"\"\n                                                src={\n                                                    isStoredMap\n                                                        ? `../../../cartes/${storedMapName}/openstreetmap/${cell[0]}_${cell[1]}.png`\n                                                        : `https://a.tile.openstreetmap.fr/osmfr/${cell[0]}/${cell[1]}/${cell[2]}.png`\n                                                }\n                                            />\n                                            <img\n                                                alt=\"\"\n                                                className=\"overlayed\"\n                                                src={\n                                                    isStoredMap\n                                                        ? `../../../cartes/${storedMapName}/openseamap/${cell[0]}_${cell[1]}.png`\n                                                        : `https://tiles.openseamap.org/seamark/${cell[0]}/${cell[1]}/${cell[2]}.png`\n                                                }\n                                            />\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <canvas\n                ref={canvasGraticuleRef}\n                className=\"canvas-style-gaticule mt-5\"\n            ></canvas>\n        </div>\n    );\n};\n","import {\n    Button,\n    Navbar,\n    OverlayTrigger,\n    Tooltip,\n    Toast\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faLifeRing,\n    faMapMarkedAlt,\n    faPencilRuler,\n    faQuestion,\n    faSave\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./TopBar.css\";\n\nconst renderTooltip = (title) => <Tooltip id=\"button-tooltip\">{title}</Tooltip>;\n\nexport const TopBar = (props) => {\n    const { setShowSettings, setShowLoadMap, amerState } = props;\n    const [amer, setAmer] = amerState;\n\n    const handleShowSettings = () => setShowSettings(true);\n    const handleShowLoadMap = () => setShowLoadMap(true);\n    const handleAmerState = () => setAmer(!amer);\n\n    return (\n        <>\n            <Navbar\n                sticky=\"top\"\n                className=\"navbar-dark\"\n                style={{ position: \"fixed\", width: \"100%\" }}\n                bg=\"dark\"\n            >\n                <div className=\"topbar-container\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        &nbsp;&nbsp;Assistance Navigation Maritime\n                    </a>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Gérer les coordonnées\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            disabled={!navigator.onLine}\n                            onClick={navigator.onLine && handleShowSettings}\n                        >\n                            <FontAwesomeIcon icon={faMapMarkedAlt} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Charger une carte\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleShowLoadMap}\n                        >\n                            <FontAwesomeIcon icon={faSave} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Placer un amer\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleAmerState}\n                        >\n                            <FontAwesomeIcon icon={faLifeRing} size=\"lg\" />\n                            {!!amer ? \" ON\" : \" OFF\"}\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Tracer une route\")}\n                    >\n                        <Button variant=\"primary\" className=\"spacedButton\">\n                            <FontAwesomeIcon icon={faPencilRuler} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Aide\")}\n                    >\n                        <Button variant=\"primary\" className=\"spacedButton\">\n                            <FontAwesomeIcon icon={faQuestion} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                </div>\n            </Navbar>\n        </>\n    );\n};\n","import { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { isBetween } from \"../../helpers/helpers\";\nimport { generateMapArray } from \"../../helpers/GenerateMap\";\n\nexport const SettingsModal = (props) => {\n    const {\n        show,\n        setMapArray,\n        mapNameState,\n        savedMapsState,\n        setMapSettingsData,\n        setIsStoredMap\n    } = props;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [showSettings, setShowSettings] = show;\n    const [mapName, setMapName] = mapNameState;\n\n    // Latitude\n    const [latDeg, setLatDeg] = useState(\"47\");\n    const [latMin, setLatMin] = useState(\"25\");\n    const [latSec, setLatSec] = useState(\"0\");\n    const [latRad, setLatRad] = useState(\"N\");\n\n    // Longitude\n    const [lonDeg, setLonDeg] = useState(\"2\");\n    const [lonMin, setLonMin] = useState(\"50\");\n    const [lonSec, setLonSec] = useState(\"0\");\n    const [lonRad, setLonRad] = useState(\"O\");\n\n    // Distance Longitude\n    const [lonDistDeg, setLonDistDeg] = useState(\"0\");\n    const [lonDistMin, setLonDistMin] = useState(\"15\");\n\n    // Distance Latitude\n    const [latDistDeg, setLatDistDeg] = useState(\"0\");\n    const [latDistMin, setLatDistMin] = useState(\"15\");\n\n    // Footer\n    const [mapZoom, setMapZoom] = useState(\"13\");\n\n    const handleCloseSettings = () => setShowSettings(false);\n    const applySettings = () => {\n        if (!savedMaps.find((savedMap) => savedMap === mapName)) {\n            setSavedMaps([...savedMaps, mapName]);\n            const mapArray = generateMapArray({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom)\n            });\n            setIsStoredMap(false);\n            setMapSettingsData({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom),\n                name: mapName\n            });\n            setMapArray(mapArray);\n            setShowSettings(false);\n        } else {\n            alert(\"Une carte possédant ce nom existe déjà\");\n        }\n    };\n\n    return (\n        <Modal show={showSettings} onHide={handleCloseSettings} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Gestion des coordonnées</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapName\">\n                            Nom de la carte :\n                        </label>\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            id=\"mapName\"\n                            value={mapName}\n                            onChange={(e) => setMapName(e.target.value)}\n                        />\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDeg\"\n                                value={latDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -90, 90) &&\n                                    setLatDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latMin\"\n                                value={latMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latSec\"\n                                value={latSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <label className=\"form-label\" htmlFor=\"latitude\">\n                            Latitude\n                        </label>\n                        <div\n                            name=\"latitude\"\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioN\"\n                                value=\"N\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"N\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioN\"\n                            >\n                                Nord\n                            </label>\n\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioS\"\n                                value=\"S\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"S\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioS\"\n                            >\n                                Sud\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDeg\"\n                                value={lonDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -180, 180) &&\n                                    setLonDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonMin\"\n                                value={lonMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonSec\"\n                                value={lonSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <label className=\"form-label\" htmlFor=\"latitude\">\n                            Longitude\n                        </label>\n                        <div\n                            className=\"btn-group\"\n                            name=\"latitude\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioE\"\n                                value=\"E\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"E\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioE\"\n                            >\n                                Est\n                            </label>\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioO\"\n                                value=\"O\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"O\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioO\"\n                            >\n                                Ouest\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistDeg\">\n                            Degré latitude\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistDeg\"\n                                value={latDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -180, 180) &&\n                                    setLatDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistMin\">\n                            Minutes latitude\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistMin\"\n                                value={latDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistDeg\">\n                            Degré longitude\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistDeg\"\n                                value={lonDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -180, 180) &&\n                                    setLonDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistMin\">\n                            Minutes longitude\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistMin\"\n                                value={lonDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapZoom\">\n                            Zoom :\n                        </label>\n                        <select\n                            className=\"form-control\"\n                            id=\"mapZoom\"\n                            value={mapZoom}\n                            onChange={(e) => setMapZoom(e.target.value)}\n                        >\n                            <option value=\"10\">1:500 000</option>\n                            <option value=\"11\">1:250 000</option>\n                            <option value=\"12\">1:150 000</option>\n                            <option value=\"13\">1:70 000</option>\n                            <option value=\"14\">1:35 000</option>\n                            <option value=\"15\">1:15 000</option>\n                            <option value=\"16\">1:8 000</option>\n                            <option value=\"17\">1:4 000</option>\n                            <option value=\"18\">1:2 000</option>\n                        </select>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseSettings}>\n                    Annuler\n                </Button>\n                <Button variant=\"success\" onClick={applySettings}>\n                    Valider\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { Modal, Button, Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nconst fs = window.require(\"fs\");\nconst request = require(\"request\");\n\nexport const LoadMapModal = (props) => {\n    const {\n        show,\n        mapArrayState,\n        mapNameState,\n        savedMapsState,\n        isStoredMapState,\n        storedMapState,\n        mapSettingsDataState\n    } = props;\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n    const [mapName, setMapName] = mapNameState;\n    const [mapArray, setMapArray] = mapArrayState;\n    const [showLoadMap, setShowLoadMap] = show;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [storedMapName, setStoredMapName] = storedMapState;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [currentlySelectedMapName, setCurrentlySelectedMapName] = useState(\n        savedMaps ? savedMaps[0] : \"\"\n    );\n    const handleCloseLoadMap = () => setShowLoadMap(false);\n\n    // To call when mapArray changes\n    const download = (uri, filename) => {\n        request.head(uri, () => {\n            request(uri).pipe(fs.createWriteStream(filename));\n        });\n    };\n\n    useEffect(() => {\n        if (!isStoredMap) {\n            mapArray.map((row, rowIndex) => {\n                row.map((cell, cellIndex) => {\n                    download(\n                        `https://a.tile.openstreetmap.fr/osmfr/${cell[0]}/${cell[1]}/${cell[2]}.png`,\n                        \"cartes/\" +\n                            mapName +\n                            \"/openstreetmap/\" +\n                            rowIndex +\n                            \"_\" +\n                            cellIndex +\n                            \".png\"\n                    );\n                    download(\n                        `https://tiles.openseamap.org/seamark/${cell[0]}/${cell[1]}/${cell[2]}.png`,\n                        \"cartes/\" +\n                            mapName +\n                            \"/openseamap/\" +\n                            rowIndex +\n                            \"_\" +\n                            cellIndex +\n                            \".png\"\n                    );\n                });\n            });\n        }\n    }, [mapArray]);\n\n    useEffect(() => {\n        const saveCurrentMap = async () => {\n            if (mapArray.length) {\n                var data_file = \"cartes/\" + mapName + \"/informations.txt\";\n                var content_file =\n                    \"zoom=\" +\n                    mapArray[0][0][0] +\n                    \";latSize=\" +\n                    mapArray.length +\n                    \";lonSize=\" +\n                    mapArray[0].length +\n                    \";mapSettingsData=\" +\n                    JSON.stringify(mapSettingsData);\n                await fs.mkdir(\"cartes/\" + mapName, () => {});\n                await fs.mkdir(\n                    \"cartes/\" + mapName + \"/openstreetmap\",\n                    () => {}\n                );\n                await fs.mkdir(\"cartes/\" + mapName + \"/openseamap\", () => {});\n                await fs.writeFile(data_file, content_file, () => {});\n            }\n        };\n        saveCurrentMap();\n    }, [savedMaps]);\n\n    useEffect(() => {\n        setCurrentlySelectedMapName(savedMaps[0]);\n    }, [savedMaps]);\n\n    const handleValidate = () => {\n        if (currentlySelectedMapName) {\n            setStoredMapName(currentlySelectedMapName);\n\n            const dataFilePath =\n                \"cartes/\" + currentlySelectedMapName + \"/informations.txt\";\n\n            fs.readFile(dataFilePath, \"utf8\", function (err, data) {\n                if (err) {\n                    return;\n                }\n\n                let latSize = data.split(\";\")[1].split(\"=\")[1];\n                let lonSize = data.split(\";\")[2].split(\"=\")[1];\n                setMapSettingsData(\n                    JSON.parse(data.split(\";\")[3].split(\"=\")[1])\n                );\n                const newMapArray = [];\n                for (let i = 0; i <= latSize - 1; ++i) {\n                    newMapArray[i] = [];\n                    for (let j = 0; j <= lonSize - 1; ++j) {\n                        newMapArray[i][j] = [i, j];\n                    }\n                }\n                setIsStoredMap(true);\n                setMapArray(newMapArray);\n            });\n\n            handleCloseLoadMap();\n        }\n    };\n\n    return (\n        <Modal show={showLoadMap} onHide={handleCloseLoadMap} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Charger une carte</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Nom</Form.Label>\n                        <Form.Control\n                            disabled={!savedMaps.length}\n                            as=\"select\"\n                            value={currentlySelectedMapName}\n                            onChange={(e) =>\n                                setCurrentlySelectedMapName(e.target.value)\n                            }\n                        >\n                            <option selected></option>\n                            {savedMaps.length &&\n                                savedMaps.map((currMapName) => (\n                                    <option value={currMapName}>\n                                        {currMapName}\n                                    </option>\n                                ))}\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseLoadMap}>\n                    Annuler\n                </Button>\n                <Button\n                    variant=\"success\"\n                    disabled={!savedMaps.length || !currentlySelectedMapName}\n                    onClick={handleValidate}\n                >\n                    Valider Carte\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { useState, useEffect } from \"react\";\nimport { SettingsModal } from \"./Modals/SettingsModal\";\nimport { LoadMapModal } from \"./Modals/LoadMapModal\";\nconst fs = window.require(\"fs\");\n\nexport const Modals = (props) => {\n    const {\n        settingsModal,\n        loadMapModal,\n        mapArrayState,\n        isStoredMapState,\n        mapSettingsDataState,\n        mapNameState,\n        storedMapState\n    } = props;\n    const [mapName, setMapName] = mapNameState;\n    const [savedMaps, setSavedMaps] = useState([]);\n    const [mapArray, setMapArray] = mapArrayState;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [hasLoadedMapDir, setHasLoadedMapDir] = useState(false);\n\n    // Charge toutes les cartes enregistrées dans le disque\n    useEffect(() => {\n        if (!hasLoadedMapDir) {\n            const loadStoredMaps = async () => {\n                const localMapArray = [];\n                await fs.readdir(\"cartes/\", (_, fileList) => {\n                    if (fileList.length) {\n                        fileList.forEach((file) => {\n                            localMapArray.push(file);\n                        });\n                    }\n                });\n                setSavedMaps(localMapArray);\n            };\n            loadStoredMaps();\n            setHasLoadedMapDir(true);\n        }\n    }, [hasLoadedMapDir]);\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n\n    return (\n        <>\n            <LoadMapModal\n                show={loadMapModal}\n                mapArrayState={[mapArray, setMapArray]}\n                isStoredMapState={isStoredMapState}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                storedMapState={storedMapState}\n                mapSettingsDataState={mapSettingsDataState}\n            />\n            <SettingsModal\n                setMapSettingsData={setMapSettingsData}\n                show={settingsModal}\n                setMapArray={setMapArray}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                setIsStoredMap={setIsStoredMap}\n            />\n        </>\n    );\n};\n","import { Canvas } from \"./components/Canvas\";\nimport { SeaMap } from \"./components/SeaMap\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Modals } from \"./components/Modals\";\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport const App = () => {\n    const [showSettings, setShowSettings] = useState(false);\n    const [showLoadMap, setShowLoadMap] = useState(false);\n    const [mapArray, setMapArray] = useState([]);\n    const [isStoredMap, setIsStoredMap] = useState(true);\n    const [mapSettingsData, setMapSettingsData] = useState({});\n    const [mapName, setMapName] = useState(\"Baie de Quiberon\");\n    const [storedMapName, setStoredMapName] = useState(\"\");\n    const [amer, setAmer] = useState(false);\n    const [hasScrollListener, setHasScrollListener] = useState(false);\n\n    useEffect(() => {\n        const ele = document.getElementById(\"dragMap\");\n        if (!hasScrollListener) {\n            let x = 0;\n            let y = 0;\n            let html = document.documentElement;\n            const mouseDownHandler = (e) => {\n                x = e.clientX;\n                y = e.clientY;\n                document.addEventListener(\"mousemove\", mouseMoveHandler);\n                document.addEventListener(\"mouseup\", mouseUpHandler);\n                ele.style.cursor = \"grabbing\";\n                ele.style.userSelect = \"none\";\n            };\n\n            const mouseMoveHandler = (e) => {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (\n                    (ele.offsetLeft > 0 && dx > 0) ||\n                    (html.scrollWidth === html.clientWidth && dx < 0)\n                ) {\n                    dx = 0;\n                }\n                if (\n                    (ele.offsetTop > 0 && dy > 0) ||\n                    (html.scrollHeight === html.clientHeight && dy < 0)\n                ) {\n                    dy = 0;\n                }\n\n                ele.style.top = `${ele.offsetTop + dy}px`;\n                ele.style.left = `${ele.offsetLeft + dx}px`;\n                x = e.clientX;\n                y = e.clientY;\n            };\n\n            const mouseUpHandler = () => {\n                document.removeEventListener(\"mousemove\", mouseMoveHandler);\n                document.removeEventListener(\"mouseup\", mouseUpHandler);\n                ele.style.cursor = \"grab\";\n                ele.style.removeProperty(\"user-select\");\n            };\n            setHasScrollListener(true);\n            ele.addEventListener(\"mousedown\", mouseDownHandler);\n        }\n    });\n\n    return (\n        <>\n            <TopBar\n                setShowSettings={setShowSettings}\n                setShowLoadMap={setShowLoadMap}\n                amerState={[amer, setAmer]}\n            />\n            <Modals\n                settingsModal={[showSettings, setShowSettings]}\n                loadMapModal={[showLoadMap, setShowLoadMap]}\n                isStoredMapState={[isStoredMap, setIsStoredMap]}\n                mapArrayState={[mapArray, setMapArray]}\n                mapSettingsDataState={[mapSettingsData, setMapSettingsData]}\n                mapNameState={[mapName, setMapName]}\n                storedMapState={[storedMapName, setStoredMapName]}\n            />\n            <div id=\"dragMap\" className=\"draggable\">\n                <SeaMap\n                    mapArray={mapArray}\n                    isStoredMap={isStoredMap}\n                    mapSettingsData={mapSettingsData}\n                    storedMapName={storedMapName}\n                />\n                <Canvas amer={amer} mapArray={mapArray} />\n            </div>\n        </>\n    );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport fs from \"fs\";\nconsole.log({ fs });\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nif (window.cordova) {\n    document.addEventListener(\n        \"deviceready\",\n        () => {\n            renderReactDom();\n        },\n        false\n    );\n} else {\n    renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}