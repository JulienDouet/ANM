{"version":3,"sources":["regle-cras.png","helpers/helpers.js","helpers/GenerateMap.js","components/Canvas.jsx","components/Route.jsx","components/SeaMap.jsx","components/TopBar.jsx","components/Modals/SettingsModal.jsx","components/Modals/LoadMapModal.jsx","components/Modals.jsx","components/HelpModal.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["isBetween","value","lower","higher","getBeginLastTile","zoom","degLatitude","degLongitude","degLatDist","degLongDist","beginLatDegree","beginLongDegree","lastLatDegree","lastLongDegree","parseInt","Math","asinh","tan","PI","convertToDecimalDegre","latitude","longitude","latitudeDistance","longitudeDistance","decimalDegreLatitude","deg","min","sec","decimalDegreLongitude","decimalDegreLatitudeDistance","decimalDegreLongitudeDistance","orientation","generateTileArray","beginLastCoords","beginLatTile","beginLongTile","lastLatTile","lastLongTile","sizeLatitude","sizeLongitude","tileArray","Array","map","i","j","degToDms","dd","isLng","dir","absDd","abs","frac","round","tabLignes","tabPositions","tabAngles","tabColor","color","compteurColor","Point","x","y","this","_x","_y","pt2","pt1","Line","_coef","getCoef","_origin","_pt1","_pt2","line","origin","coef","Canvas","props","mapArray","amer","mapSettingsData","useState","show","setShow","handleClose","angleVal","setAngleVal","longueurVal","deviation","setDeviation","declinaison","setDeclinaison","x1","y1","r","angle","drawLineData","setDrawLineData","amerCanvasRef","useRef","useEffect","length","amerCanvas","current","height","width","getContext","clearRect","drawLine","ligne","context","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","drawAngle","fillStyle","font","fillText","drawPoint","arc","fill","drawPosition","position","xtab","ytab","rect","temp","redrawCanvas","getColor","drawLinesFromArray","drawAndPlaceCRA","regle","Image","src","image","alt","onload","save","translate","rotate","drawImage","restore","line1","line2","line3","trouverMilieu","compteur","pt_intersection1","getIntersection","pt_intersection2","pt_intersection3","line_median1","getMedian","line_median2","middle1","push","resX","addEventListener","e","clientX","clientY","getBoundingClientRect","left","top","document","getElementById","innerHTML","console","log","id","ref","className","onClick","event","setCoordinates","Modal","onHide","size","centered","Header","Title","Body","Form","Label","htmlFor","Control","onChange","target","type","placeholder","Footer","Button","variant","p1X","p1Y","p2X","cos","p2Y","sin","arrayPoints","arrayDefLigne","distanceMilesRf","distancePixelsRf","distancePixelsReference","distanceMilesReference","Route","route","distanceParcourirVal","setDistanceParcourirVal","capVal","setCapVal","noeudVal","setNoeudVal","vitesseFondVal","setVitesseFondVal","deriveVal","setDeriveVal","declinaisonVal","setDeclinaisonVal","deviationVal","setDeviationVal","tmpTrajet","routeCanvasRef","pixelsToDegDecimal","routeCanvas","setRoute","l1degDec","l2degDec","long1","lat1","lat2","distanceTwoPoints","lon1","lon2","φ1","φ2","Δφ","Δλ","a","atan2","sqrt","getDistanceFromLatLonInMiles","drawLineAngle","long","longMiles","couleur","epaisseurTrait","def","x2","y2","milieu","milieuTwoPoints","roundDecimal","pow","nombre","precision","tmp","arrayP2","noeudCourant","arrayCoord","x3","y3","degreeRS","distanceRSPixels","distanceRSMiles","degreeCapVrai","arrayCoordCapCompas","x4","y4","SeaMap","tableRef","isStoredMap","storedMapName","canvasGraticuleRef","cellSpacing","cellPadding","style","border","row","rowIndex","cell","cellIndex","canvasGraticule","setLineDash","coordCentX","coordCentY","coordEstX","coordSudY","renderTooltip","title","Tooltip","TopBar","setShowSettings","setShowLoadMap","setShowHelp","amerState","routeState","setAmer","swap","nodeA","nodeB","parentA","parentNode","siblingA","nextSibling","insertBefore","Navbar","sticky","bg","Collapse","href","OverlayTrigger","placement","overlay","disabled","navigator","onLine","icon","faMapMarkedAlt","faSave","elemRoute","elemCanvas","faLifeRing","faPencilRuler","faQuestion","fontWeight","SettingsModal","setMapArray","mapNameState","savedMapsState","mapSettingsDataState","setIsStoredMap","setMapSettingsData","savedMaps","setSavedMaps","showSettings","mapName","setMapName","latDeg","setLatDeg","latMin","setLatMin","latSec","setLatSec","latRad","setLatRad","lonDeg","setLonDeg","lonMin","setLonMin","lonSec","setLonSec","lonRad","setLonRad","lonDistDeg","setLonDistDeg","lonDistMin","setLonDistMin","latDistDeg","setLatDistDeg","latDistMin","setLatDistMin","mapZoom","setMapZoom","handleCloseSettings","noValidate","name","role","aria-label","autoComplete","checked","find","savedMap","data","alert","generateMapArray","tiles","LoadMapModal","mapArrayState","isStoredMapState","storedMapState","showLoadMap","currentlySelectedMapName","setCurrentlySelectedMapName","handleCloseLoadMap","Group","as","selected","currMap","ele","selectedMap","Modals","settingsModal","loadMapModal","HelpModal","showState","showHelp","App","setStoredMapName","hasScrollListener","setHasScrollListener","html","documentElement","mouseMoveHandler","dx","dy","offsetLeft","scrollWidth","clientWidth","offsetTop","scrollHeight","clientHeight","mouseUpHandler","removeEventListener","cursor","removeProperty","userSelect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","renderReactDom","ReactDOM","render","window","cordova"],"mappings":"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","file":"static/js/main.dc7f9b42.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/regle-cras.38c0b4c7.png\";","export const isBetween = (value, lower, higher) => value >= lower && value <= higher;\nexport const degToRadian = (degrees) => degrees * (Math.PI / 180);","export const generateMapArray = (data) => {\n    const { latitude, longitude, latitudeDistance, longitudeDistance, zoom } = data;\n\n\n    const { decimalDegreLatitude, decimalDegreLongitude, decimalDegreLatitudeDistance, decimalDegreLongitudeDistance } =\n        convertToDecimalDegre(latitude, longitude,latitudeDistance, longitudeDistance);\n\n    const beginLastCoords = getBeginLastTile(\n        zoom,\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    );\n    \n    return generateTileArray(beginLastCoords, zoom);\n};\n\nconst getBeginLastTile = (zoom, degLatitude, degLongitude, degLatDist, degLongDist) => {\n\n  const beginLatDegree = degLatitude - degLatDist;\n  const beginLongDegree = degLongitude - degLongDist;\n\n  const lastLatDegree = degLatitude + degLatDist;\n  const lastLongDegree = degLongitude + degLongDist;\n\n\n\n  const beginLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(beginLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const beginLongTile = parseInt(((beginLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\n\n  const lastLatTile = parseInt(\n          ((1.0 - Math.asinh(Math.tan(lastLatDegree * (Math.PI / 180))) / Math.PI) /\n              2.0) *\n              2.0 ** zoom\n      );\n\n  const lastLongTile = parseInt(((lastLongDegree + 180.0) / 360.0) * 2.0 ** zoom);\n\nreturn [beginLatTile, beginLongTile, lastLatTile, lastLongTile];\n};\n\n\n/**\n * Fonction permettant de convertir des DMS (Degré, Minutes, Secondes) en DD (Degré Decimaux)\n * @param {La latitude à convertir en DD} latitude\n * @param {La longitude à convertir en DD} longitude\n * @returns Les coordonnées DMS converties en DD\n */\nexport const convertToDecimalDegre = (latitude, longitude, latitudeDistance, longitudeDistance) => {\n    const decimalDegreLatitude =\n        parseInt(latitude.deg) +\n        (latitude.min * 60 + parseInt(latitude.sec)) / 3600;\n    const decimalDegreLongitude =\n        parseInt(longitude.deg) +\n        (longitude.min * 60 + parseInt(longitude.sec)) / 3600;\n\n    const decimalDegreLatitudeDistance =\n        parseInt(latitudeDistance.deg) +\n        (latitudeDistance.min * 60)/3600;\n\n    const decimalDegreLongitudeDistance =\n        parseInt(longitudeDistance.deg) +\n        (longitudeDistance.min * 60)/3600;\n\n\n    return {\n        decimalDegreLatitude:\n            latitude.orientation === \"S\"\n                ? -decimalDegreLatitude\n                : decimalDegreLatitude,\n        decimalDegreLongitude:\n            longitude.orientation === \"O\"\n                ? -decimalDegreLongitude\n                : decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n\n    };\n};\n\n/**\n * Créé le tableau contenant les coordonnées de toutes les tiles\n * @param {Le zoom de la carte} zoom\n * @returns\n */\nconst generateTileArray = (beginLastCoords, zoom) => {\n\n\n\n    const beginLatTile = beginLastCoords[0];\n    const beginLongTile = beginLastCoords[1];\n\n    const lastLatTile = beginLastCoords[2];\n    const lastLongTile = beginLastCoords[3];\n\n    const sizeLatitude = beginLatTile - lastLatTile ;\n    const sizeLongitude = lastLongTile - beginLongTile ;\n\n    const tileArray = [...Array(sizeLatitude + 1)].map(() => Array(sizeLongitude + 1));\n\n    for (let i = beginLongTile; i <= lastLongTile; ++i){\n        for (let j = lastLatTile; j <= beginLatTile; ++j){\n            tileArray[j - lastLatTile][i - beginLongTile] = [\n                zoom,\n                 i,\n                 j\n            ];\n          }\n        }\n    return tileArray;\n};\n\n\nexport function degToDms (dd, isLng) {\n  const dir = dd < 0\n     ? isLng ? 'O' : 'S'\n     : isLng ? 'E' : 'N';\n\n   const absDd = Math.abs(dd);\n   const deg = absDd | 0;\n   const frac = absDd - deg;\n   const min = (frac * 60) | 0;\n   const sec =  Math.round((frac * 3600 - min * 60)* 100) / 100;\n   return deg + \"°\" + min + \"'\" + sec + '\"' + dir;\n}\n\nexport function deg_to_dms_array (dd, isLng) {\n  var dir = dd < 0\n     ? isLng ? 'O' : 'S'\n     : isLng ? 'E' : 'N';\n\n   var absDd = Math.abs(dd);\n   var deg = absDd | 0;\n   var frac = absDd - deg;\n   var min = (frac * 60) | 0;\n   var sec = frac * 3600 - min * 60;\n   // Round it to 2 decimal points.\n   sec = Math.round(sec * 100) / 100;\n   return [deg, min, sec, dir];\n}\n\n\nexport function getDistanceFromLatLonInMiles(lat1,lon1,lat2,lon2) {\n\n  const R = 6371e3; // metres\n  const φ1 = lat1 * Math.PI/180; // φ, λ in radians\n  const φ2 = lat2 * Math.PI/180;\n  const Δφ = (lat2-lat1) * Math.PI/180;\n  const Δλ = (lon2-lon1) * Math.PI/180;\n\n  const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n          Math.cos(φ1) * Math.cos(φ2) *\n          Math.sin(Δλ/2) * Math.sin(Δλ/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  const d = R * c; // in metres\n  return d * 0.000621371 // en miles;\n}\n","import \"./Canvas.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport image from \"../regle-cras.png\";\nimport { degToRadian } from \"../helpers/helpers\";\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nimport { degToDms } from \"../helpers/GenerateMap\";\n\n// Valeur pour prendre le nord en référence comme 0°\nconst DEFAULT_ANGLE = 90;\n\nconst CALIBRAGE_ZERO_ROUGE = -0.0845;\nconst CALIBRAGE_ZERO_NOIR = -0.9155;\n\nvar tabLignes = [];\nvar tabPositions = [];\nvar tabAngles = [];\n\nconst tabColor = [\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"brown\",\n    \"black\",\n    \"orange\",\n    \"purple\",\n    \"cyan\",\n    \"magenta\",\n    \"pink\"\n];\nvar color = tabColor[0];\nvar compteurColor = 0;\n\nclass Point {\n    constructor(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n\n    get x() {\n        return this._x;\n    }\n    get y() {\n        return this._y;\n    }\n\n    getCoef(pt2) {\n        return (pt2.y - this._y) / (pt2.x - this._x);\n    }\n\n    getMedian(pt1, pt2) {\n        let x = (pt1.x + pt2.x) / 2;\n        let y = (pt1.y + pt2.y) / 2;\n\n        return new Line(this, new Point(x, y));\n    }\n}\n\nclass Line {\n    constructor(pt1, pt2) {\n        this._coef = pt1.getCoef(pt2);\n        this._origin = pt1.y - this._coef * pt1.x;\n        this._pt1 = pt1;\n        this._pt2 = pt2;\n    }\n    get coef() {\n        return this._coef;\n    }\n    get origin() {\n        return this._origin;\n    }\n    get pt1() {\n        return this._pt1;\n    }\n    get pt2() {\n        return this._pt2;\n    }\n\n    getValue(x) {\n        return this._coef * x + this._origin;\n    }\n\n    getIntersection(line) {\n        let x = Math.abs(\n            (line.origin - this._origin) / (line.coef - this._coef)\n        );\n        let y = this._coef * x + this._origin;\n        return new Point(x, y);\n    }\n}\n\nexport const Canvas = (props) => {\n    const { mapArray, amer, mapSettingsData } = props;\n    //Modal\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n    // Angle et Longueur\n    const [angleVal, setAngleVal] = useState(\"0\");\n    const [longueurVal, setLongueurVal] = useState(\"2000\");\n\n    // Déviation et Déclinaison\n    const [deviation, setDeviation] = useState(\"0\");\n    const [declinaison, setDeclinaison] = useState(\"0\");\n\n    // Donnée pour tracer le trait\n    const [drawLineData, setDrawLineData] = useState({\n        x1: 0,\n        y1: 0,\n        r: 0,\n        angle: 0 - DEFAULT_ANGLE\n    });\n\n    const amerCanvasRef = useRef(null);\n    useEffect(() => {\n        if (mapArray.length) {\n            const amerCanvas = amerCanvasRef.current;\n            amerCanvas.height = mapArray.length * 256;\n            amerCanvas.width = mapArray[0].length * 256;\n        }\n    }, [mapArray]);\n\n    useEffect(() => {\n        tabLignes = [];\n        tabPositions = [];\n        color = tabColor[0];\n        compteurColor = 0;\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.clearRect(\n            0,\n            0,\n            amerCanvasRef.current.width,\n            amerCanvasRef.current.height\n        );\n    }, [mapSettingsData]);\n\n    /**\n     *\n     */\n    const drawLine = (ligne, color) => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n\n        context.beginPath();\n\n        context.strokeStyle = color;\n        context.lineWidth = 5;\n        context.moveTo(ligne.pt1.x, ligne.pt1.y);\n        context.lineTo(ligne.pt2.x, ligne.pt2.y);\n\n        context.stroke();\n    };\n\n    const drawAngle = (angle, x, y, color) => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        context.fillStyle = color;\n        context.font = \"20px serif\";\n        context.fillText(angle + \"°\", x, y);\n    };\n\n    const drawPoint = (x, y) => {\n        const context = amerCanvasRef.current.getContext(\"2d\");\n\n        context.beginPath();\n\n        context.fillStyle = \"red\";\n        context.strokeStyle = \"red\";\n        context.arc(x, y, 5, 0, 2 * Math.PI, true);\n        context.fill();\n\n        context.stroke();\n    };\n\n    const drawPosition = (position) => {\n        for (var i = 0; i < tabPositions.length; i++) {\n            const xtab = mapArray[0].length * 256;\n            const ytab = mapArray.length * 256;\n            var position = tabPositions[i];\n            // Dessiner point intersection + Label avec coordonnées\n            drawPoint(position.x, position.y);\n            const context = amerCanvasRef.current.getContext(\"2d\");\n            context.beginPath();\n            context.strokeStyle = \"#000000\";\n            context.rect(position.x, position.y, 180, 25);\n            context.fillStyle = \"#000000\";\n            context.fill();\n            context.fillStyle = \"#FFFFFF\";\n            context.fillText(\n                temp(position.x, position.y, xtab, ytab),\n                position.x + 10,\n                position.y + 20\n            );\n            context.stroke();\n        }\n    };\n\n    const drawLinesFromArray = () => {\n        for (var i = 0; i < tabLignes.length; i++) {\n            if (i % 3 === 0 && i > 0) {\n                compteurColor++;\n            }\n            color = getColor(compteurColor);\n            drawLine(tabLignes[i], color);\n            drawAngle(\n                tabAngles[i],\n                tabLignes[i].pt1.x,\n                tabLignes[i].pt1.y,\n                color\n            );\n        }\n    };\n\n    const redrawCanvas = () => {\n        if (tabLignes.length > 1) {\n            const context = amerCanvasRef.current.getContext(\"2d\");\n            context.clearRect(\n                0,\n                0,\n                amerCanvasRef.current.width,\n                amerCanvasRef.current.height\n            );\n            drawLinesFromArray();\n        }\n        if (tabLignes.length >= 3) {\n            drawPosition();\n        }\n    };\n\n    /**\n     *\n     */\n    // Règle de cras\n    // Pour obtenir le milieu de la règle : -(regle.width / 2)\n    // Pour obtenir le point 0 du rapporteur (rouge) : CALIBRAGE_ZERO_ROUGE * regle.height\n    // Pour obtenir le point 0 du rapporteur (noir) : CALIBRAGE_ZERO_NOIR * regle.height\n    const drawAndPlaceCRA = () => {\n        var regle = new Image();\n        regle.src = image;\n        regle.alt = \"alt text\";\n\n        const context = amerCanvasRef.current.getContext(\"2d\");\n        regle.onload = function () {\n            context.save();\n            context.translate(drawLineData.x1, drawLineData.y1);\n            context.rotate(\n                degToRadian(\n                    parseInt(angleVal, 10) +\n                        parseInt(declinaison, 10) +\n                        parseInt(deviation, 10) -\n                        DEFAULT_ANGLE\n                )\n            );\n\n            if (angleVal >= 180) {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            } else {\n                context.drawImage(regle, -(regle.width / 2), 0);\n            }\n\n            context.restore();\n\n            //Tracer un trait au milieu du rapporteur\n            // var ligneMilieuRapporteur = new Line(new Point(0, drawLineData.y1), new Point(mapArray[0].length, drawLineData.y1));\n            // drawLine(ligneMilieuRapporteur, \"orange\");\n\n            if (tabLignes.length % 3 == 0) {\n                let line1 = tabLignes[tabLignes.length - 3];\n                let line2 = tabLignes[tabLignes.length - 2];\n                let line3 = tabLignes[tabLignes.length - 1];\n\n                trouverMilieu(line1, line2, line3);\n            }\n        };\n    };\n\n    const getColor = (compteur) => {\n        return tabColor[compteur % tabColor.length];\n    };\n\n    const trouverMilieu = (line1, line2, line3) => {\n        // get intersection\n        let pt_intersection1 = line1.getIntersection(line2);\n        let pt_intersection2 = line1.getIntersection(line3);\n        let pt_intersection3 = line2.getIntersection(line3);\n\n        let line_median1 = pt_intersection1.getMedian(\n            pt_intersection2,\n            pt_intersection3\n        );\n        let line_median2 = pt_intersection2.getMedian(\n            pt_intersection1,\n            pt_intersection3\n        );\n\n        // middle\n        let middle1 = line_median1.getIntersection(line_median2);\n        tabPositions.push(middle1);\n        drawPosition();\n    };\n\n    /**\n     *\n     * @param {L'évènement} event\n     */\n    const setCoordinates = (event) => {\n        setShow(true);\n        const rect = amerCanvasRef.current.getBoundingClientRect();\n        setDrawLineData({\n            ...drawLineData,\n            x1: event.clientX - rect.left,\n            y1: event.clientY - rect.top,\n            r: longueurVal\n        });\n    };\n\n    const temp = (x, y, xtab, ytab) => {\n        const latitude = mapSettingsData.latitude;\n        const longitude = mapSettingsData.longitude;\n        const latitudeDistance = mapSettingsData.latitudeDistance;\n        const longitudeDistance = mapSettingsData.longitudeDistance;\n\n        const {\n            decimalDegreLatitude,\n            decimalDegreLongitude,\n            decimalDegreLatitudeDistance,\n            decimalDegreLongitudeDistance\n        } = convertToDecimalDegre(\n            latitude,\n            longitude,\n            latitudeDistance,\n            longitudeDistance\n        );\n\n        const x2 = decimalDegreLongitude + decimalDegreLongitudeDistance;\n        const x1 = decimalDegreLongitude - decimalDegreLongitudeDistance;\n\n        const y2 = decimalDegreLatitude - decimalDegreLatitudeDistance;\n        const y1 = decimalDegreLatitude + decimalDegreLongitudeDistance;\n        const resX = (x / xtab) * (x2 - x1) + x1;\n        const resY = (y / ytab) * (y2 - y1) + y1;\n\n        return degToDms(resY, false) + \"\\xa0 \\xa0\" + degToDms(resX, true);\n    };\n\n    useEffect(() => {\n        if (amerCanvasRef) {\n            amerCanvasRef.current.addEventListener(\"mousemove\", (e) => {\n                if (\n                    mapArray.length > 1 &&\n                    (e.clientX % 2 === 0 || e.clientY % 2 === 0)\n                ) {\n                    const rect = amerCanvasRef.current.getBoundingClientRect();\n\n                    const xtab = mapArray[0].length * 256;\n                    const ytab = mapArray.length * 256;\n                    const x = parseInt(Math.abs(e.clientX - rect.left));\n                    const y = parseInt(Math.abs(e.clientY - rect.top));\n                    var label = document.getElementById(\"coordTest\");\n                    label.innerHTML = \"&nbsp;\" + temp(x, y, xtab, ytab);\n                }\n            });\n        }\n    });\n\n    useEffect(() => {\n        setDrawLineData({\n            ...drawLineData,\n            angle:\n                parseInt(angleVal, 10) +\n                parseInt(deviation, 10) +\n                parseInt(declinaison, 10) -\n                DEFAULT_ANGLE\n        });\n        console.log(drawLineData);\n    }, [angleVal, declinaison, deviation]);\n\n    useEffect(() => {\n        setDrawLineData({ ...drawLineData, r: longueurVal });\n    }, [longueurVal]);\n\n    const handleOnSubmit = (event) => {\n        compteurColor = 0;\n        var p1X = drawLineData.x1;\n        var p1Y = drawLineData.y1;\n        var p2X =\n            drawLineData.x1 +\n            drawLineData.r *\n                Math.cos((Math.PI * (drawLineData.angle + 180)) / 180);\n        var p2Y =\n            drawLineData.y1 +\n            drawLineData.r *\n                Math.sin((Math.PI * (drawLineData.angle + 180)) / 180);\n        var ligne = new Line(new Point(p1X, p1Y), new Point(p2X, p2Y));\n        tabLignes.push(ligne);\n        tabAngles.push(\n            parseInt(angleVal, 10) +\n                parseInt(declinaison, 10) +\n                parseInt(deviation, 10)\n        );\n        drawLine(ligne, color);\n        drawAngle(\n            parseInt(angleVal, 10) +\n                parseInt(declinaison, 10) +\n                parseInt(deviation, 10),\n            p1X,\n            p1Y,\n            color\n        );\n        redrawCanvas();\n        drawAndPlaceCRA();\n        handleClose();\n    };\n\n    return (\n        <>\n            <div id=\"idCanvas\">\n                <canvas\n                    id=\"canvasAmers\"\n                    ref={amerCanvasRef}\n                    className=\"canvas-style mt-5\"\n                    onClick={(e) => !!amer && setCoordinates(e)}\n                ></canvas>\n\n                <Modal show={show} onHide={handleClose} size=\"sm\" centered>\n                    <Modal.Header>\n                        <Modal.Title>Relever l'amer</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form.Label htmlFor=\"angle\">Angle</Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"angle\"\n                            value={angleVal}\n                            onChange={(e) => setAngleVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Angle\"\n                        />\n                        <Form.Label htmlFor=\"declinaison\">\n                            Déclinaison (D)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"declinaison\"\n                            value={declinaison}\n                            onChange={(e) => setDeclinaison(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Déclinaison\"\n                        />\n                        <Form.Label htmlFor=\"deviation\">\n                            Déviation (d)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"deviation\"\n                            value={deviation}\n                            onChange={(e) => setDeviation(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Déviation\"\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Annuler\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleOnSubmit}>\n                            Valider le marquage\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        </>\n    );\n};\n","import \"./Route.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport { getDistanceFromLatLonInMiles } from \"../helpers/GenerateMap.js\";\n\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nvar arrayPoints = [];\n\nvar arrayDefLigne = [\n    \"Route Fond\",\n    \"Courant\",\n    \"Route Surface\",\n    \"Cap Vrai\",\n    \"Cap Compas\"\n];\n\nvar distanceMilesRf = 0;\nvar distancePixelsRf = 0;\nvar distancePixelsReference = 0;\nvar distanceMilesReference = 0;\nexport const Route = (props) => {\n    const { mapArray, route, mapSettingsData } = props;\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n\n    // Courant\n    const [distanceParcourirVal, setDistanceParcourirVal] = useState(\"0\");\n    const [capVal, setCapVal] = useState(\"0\");\n    const [angleVal, setAngleVal] = useState(\"0\");\n    const [noeudVal, setNoeudVal] = useState(\"0\");\n    const [vitesseFondVal, setVitesseFondVal] = useState(\"1\");\n    const [deriveVal, setDeriveVal] = useState(\"0\");\n    const [declinaisonVal, setDeclinaisonVal] = useState(\"0\");\n    const [deviationVal, setDeviationVal] = useState(\"0\");\n\n    const drawPoint = (x, y, color, tmpTrajet) => {\n        const context = routeCanvasRef.current.getContext(\"2d\");\n        context.fillStyle = color || \"black\";\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI, true);\n        context.fill();\n        context.fillText(\n            \"Temps de trajet (en minutes) : \" + Math.round(tmpTrajet),\n            x + 5,\n            y + 5\n        );\n        context.stroke();\n    };\n\n    const pixelsToDegDecimal = (x, y, xtab, ytab) => {\n        const latitude = mapSettingsData.latitude;\n        const longitude = mapSettingsData.longitude;\n        const latitudeDistance = mapSettingsData.latitudeDistance;\n        const longitudeDistance = mapSettingsData.longitudeDistance;\n\n        const {\n            decimalDegreLatitude,\n            decimalDegreLongitude,\n            decimalDegreLatitudeDistance,\n            decimalDegreLongitudeDistance\n        } = convertToDecimalDegre(\n            latitude,\n            longitude,\n            latitudeDistance,\n            longitudeDistance\n        );\n\n        const x2 = decimalDegreLongitude + decimalDegreLongitudeDistance;\n        const x1 = decimalDegreLongitude - decimalDegreLongitudeDistance;\n\n        const y2 = decimalDegreLatitude - decimalDegreLatitudeDistance;\n        const y1 = decimalDegreLatitude + decimalDegreLongitudeDistance;\n        const resX = (x / xtab) * (x2 - x1) + x1;\n        const resY = (y / ytab) * (y2 - y1) + y1;\n\n        return [resX, resY];\n    };\n\n    const routeCanvasRef = useRef(null);\n\n    useEffect(() => {\n        if (mapArray.length) {\n            const routeCanvas = routeCanvasRef.current;\n\n            routeCanvas.height = mapArray.length * 256;\n            routeCanvas.width = mapArray[0].length * 256;\n        }\n    }, [mapArray]);\n\n    const setRoute = (event) => {\n        const rect = routeCanvasRef.current.getBoundingClientRect();\n        const context = routeCanvasRef.current.getContext(\"2d\");\n        context.font = \"15px Serif\";\n        let x = event.clientX - rect.left;\n        let y = event.clientY - rect.top;\n\n        arrayPoints.push([x, y]);\n        const xtab = mapArray[0].length * 256;\n        const ytab = mapArray.length * 256;\n        drawPoint(x, y, \"yellow\", 0);\n\n        let l1degDec = pixelsToDegDecimal(x, y, xtab, ytab);\n        let l2degDec = pixelsToDegDecimal(x + 1, y + 1, xtab, ytab);\n\n        let long1 = l1degDec[0];\n        let lat1 = l1degDec[1];\n\n        let lat2 = l2degDec[1];\n\n        distancePixelsReference = distanceTwoPoints(x, y, x + 1, y + 1);\n        distanceMilesReference = getDistanceFromLatLonInMiles(\n            lat1,\n            long1,\n            lat2,\n            long1\n        );\n\n        setShow(true);\n    };\n\n    const drawLineAngle = (\n        x,\n        y,\n        long,\n        angle,\n        longMiles,\n        context,\n        couleur,\n        epaisseurTrait,\n        def\n    ) => {\n        context.beginPath();\n        context.strokeStyle = couleur;\n        context.lineWidth = epaisseurTrait;\n\n        context.moveTo(x, y);\n        let x2 = x + long * Math.cos((Math.PI * (angle - 90)) / 180);\n        let y2 = y + long * Math.sin((Math.PI * (angle - 90)) / 180);\n        context.lineTo(x2, y2);\n        context.stroke();\n        context.fillStyle = couleur;\n        let milieu = milieuTwoPoints(x, y, x2, y2);\n        context.fillText(\n            def +\n                \" - \" +\n                \"Angle (en Degré) : \" +\n                roundDecimal(angle, 1) +\n                \" \\n Distance (en Miles) : \" +\n                roundDecimal(longMiles, 2),\n            milieu[0],\n            milieu[1]\n        );\n\n        return [x2, y2];\n    };\n\n    const distanceTwoPoints = (x1, y1, x2, y2) => {\n        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    };\n    const drawLine = (x1, y1, x2, y2, context, couleur, angle, long, def) => {\n        context.beginPath();\n        context.strokeStyle = couleur;\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n        context.fillStyle = couleur;\n        let milieu = milieuTwoPoints(x1, y1, x2, y2);\n\n        context.fillText(\n            def +\n                \" - \" +\n                \"Angle (en Degré) : \" +\n                roundDecimal(angle, 1) +\n                \" \\n Distance (en Miles) : \" +\n                roundDecimal(long, 2),\n            milieu[0],\n            milieu[1]\n        );\n    };\n\n    const milieuTwoPoints = (x1, y1, x2, y2) => {\n        return [(x1 + x2) / 2, (y1 + y2) / 2];\n    };\n\n    function roundDecimal(nombre, precision) {\n        var precision = precision || 2;\n        var tmp = Math.pow(10, precision);\n        return Math.round(nombre * tmp) / tmp;\n    }\n\n    const handleOnSubmit = (event) => {\n        const context = routeCanvasRef.current.getContext(\"2d\");\n\n        let x1 = arrayPoints[0][0];\n        let y1 = arrayPoints[0][1];\n\n        distancePixelsRf =\n            (distancePixelsReference * distanceParcourirVal) /\n            distanceMilesReference;\n        distanceMilesRf = distanceParcourirVal;\n\n        let arrayP2 = drawLineAngle(\n            x1,\n            y1,\n            distancePixelsRf,\n            capVal,\n            distanceMilesRf,\n            context,\n            \"blue\",\n            1,\n            arrayDefLigne[0]\n        );\n        let x2 = arrayP2[0];\n        let y2 = arrayP2[1];\n        let noeudCourant = (noeudVal * distancePixelsRf) / distanceMilesRf;\n        let arrayCoord = drawLineAngle(\n            x1,\n            y1,\n            noeudCourant,\n            angleVal,\n            noeudCourant,\n            context,\n            \"red\",\n            1,\n            arrayDefLigne[1]\n        );\n\n        let x3 = arrayCoord[0];\n        let y3 = arrayCoord[1];\n\n        let degreeRS = (Math.atan2(y2 - y3, x2 - x3) * 180) / Math.PI + 90;\n        let distanceRSPixels = distanceTwoPoints(x3, y3, x2, y2);\n        let distanceRSMiles =\n            (distanceRSPixels * distanceMilesRf) / distancePixelsRf;\n        drawLine(\n            x3,\n            y3,\n            x2,\n            y2,\n            context,\n            \"green\",\n            degreeRS,\n            distanceRSMiles,\n            arrayDefLigne[2]\n        );\n\n        let degreeCapVrai = degreeRS - deriveVal;\n        drawLineAngle(\n            x3,\n            y3,\n            distanceRSPixels,\n            degreeCapVrai,\n            distanceRSMiles,\n            context,\n            \"brown\",\n            1,\n            arrayDefLigne[3]\n        );\n\n        let degreeCapCompas = degreeCapVrai - declinaisonVal - deviationVal;\n        let arrayCoordCapCompas = drawLineAngle(\n            x3,\n            y3,\n            distanceRSPixels,\n            degreeCapCompas,\n            distanceRSMiles,\n            context,\n            \"purple\",\n            5,\n            arrayDefLigne[4]\n        );\n        let x4 = arrayCoordCapCompas[0];\n        let y4 = arrayCoordCapCompas[1];\n\n        let dureeTrajet = (distanceRSMiles * 60) / vitesseFondVal;\n        drawPoint(x4, y4, \"purple\", dureeTrajet);\n\n        arrayPoints = [];\n        handleClose();\n    };\n\n    const handleOnSuppr = (event) => {\n        const context = routeCanvasRef.current.getContext(\"2d\");\n        const xtab = mapArray[0].length * 256;\n        const ytab = mapArray.length * 256;\n        context.clearRect(0, 0, xtab, ytab);\n    };\n    return (\n        <>\n            <div id=\"idRoute\">\n                <canvas\n                    id=\"canvas\"\n                    ref={routeCanvasRef}\n                    className=\"canvas-style mt-5\"\n                    onClick={(e) => !!route && setRoute(e)}\n                ></canvas>\n\n                <Modal show={show} onHide={handleClose} size=\"sm\" centered>\n                    <Modal.Header>\n                        <Modal.Title>Tracer route</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form.Label htmlFor=\"distanceParcourir\">\n                            Distance à parcourir (en Miles)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"distanceParcourir\"\n                            value={distanceParcourirVal}\n                            onChange={(e) =>\n                                setDistanceParcourirVal(e.target.value)\n                            }\n                            type=\"number\"\n                            placeholder=\"DistanceParcourir\"\n                        />\n                        <Form.Label htmlFor=\"cap\">Cap (en Degrés)</Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"cap\"\n                            value={capVal}\n                            onChange={(e) => setCapVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Cap\"\n                        />\n                        <Form.Label htmlFor=\"vitesseFond\">\n                            Vitesse de Fond (en Noeuds)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"vitesseFond\"\n                            value={vitesseFondVal}\n                            onChange={(e) => setVitesseFondVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"VitesseFond\"\n                        />\n                        <Form.Label htmlFor=\"angle\">\n                            Angle du Courant (en Degrés)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"angle\"\n                            value={angleVal}\n                            onChange={(e) => setAngleVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Angle\"\n                        />\n                        <Form.Label htmlFor=\"noeud\">\n                            Noeud du Courant (en Noeuds)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"noeud\"\n                            value={noeudVal}\n                            onChange={(e) => setNoeudVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Noeud\"\n                        />\n                        <Form.Label htmlFor=\"derive\">\n                            Dérive (en Degrés)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"derive\"\n                            value={deriveVal}\n                            onChange={(e) => setDeriveVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Dérive\"\n                        />\n                        <Form.Label htmlFor=\"declinaison\">\n                            Déclinaison (en Degrés)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"declinaison\"\n                            value={declinaisonVal}\n                            onChange={(e) => setDeclinaisonVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Déclinaison\"\n                        />\n                        <Form.Label htmlFor=\"deviation\">\n                            Déviation (en Degrés)\n                        </Form.Label>\n                        <Form.Control\n                            className=\"mb-2 mr-sm-2\"\n                            id=\"deviation\"\n                            value={deviationVal}\n                            onChange={(e) => setDeviationVal(e.target.value)}\n                            type=\"number\"\n                            placeholder=\"Déviation\"\n                        />\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Annuler\n                        </Button>\n                        <Button variant=\"secondary\" onClick={handleOnSuppr}>\n                            Tout supprimer\n                        </Button>\n                        <Button variant=\"primary\" onClick={handleOnSubmit}>\n                            Valider le marquage\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        </>\n    );\n};\n","import \"./SeaMap.css\";\nimport React, { useRef } from \"react\";\nimport { convertToDecimalDegre } from \"../helpers/GenerateMap\";\nimport { degToDms } from \"../helpers/GenerateMap\";\n\n// Grille\nconst drawLine = (tableRef, canvasGraticuleRef, mapSettingsData, mapArray) => {\n    const context = canvasGraticuleRef.current.getContext(\"2d\");\n    const canvasGraticule = canvasGraticuleRef.current;\n\n    const latitude = mapSettingsData.latitude;\n    const longitude = mapSettingsData.longitude;\n\n    const latitudeDistance = mapSettingsData.latitudeDistance;\n    const longitudeDistance = mapSettingsData.longitudeDistance;\n\n    const zoom = mapSettingsData.zoom;\n\n    const longitudeString =\n        longitude.deg +\n        \"° \" +\n        longitude.min +\n        \"' \" +\n        longitude.sec +\n        '\" ' +\n        longitude.orientation;\n\n    const {\n        decimalDegreLatitude,\n        decimalDegreLongitude,\n        decimalDegreLatitudeDistance,\n        decimalDegreLongitudeDistance\n    } = convertToDecimalDegre(\n        latitude,\n        longitude,\n        latitudeDistance,\n        longitudeDistance\n    );\n\n    const diffDegLongitude =\n        decimalDegreLongitude - decimalDegreLongitudeDistance;\n    const diffDegLatitude = decimalDegreLatitude + decimalDegreLatitudeDistance;\n\n    canvasGraticule.height = mapArray.length * 256;\n    canvasGraticule.width = mapArray[0].length * 256;\n\n    var height = mapArray.length * 256;\n    var width = mapArray[0].length * 256;\n\n    context.setLineDash([15, 5]);\n\n    var coordCentX = width / 2;\n    var coordCentY = height / 2;\n\n    var coordEstX = width;\n    var coordEstY = height / 2;\n\n    var coordOuestX = 0;\n    var coordOuestY = height / 2;\n\n    var coordNordX = width / 2;\n    var coordNordY = 0;\n\n    var coordSudX = width / 2;\n    var coordSudY = height;\n\n    for (\n        var i = coordCentX;\n        i <= coordEstX;\n        i += (coordEstX - coordCentX) / 6\n    ) {\n        context.moveTo(i, 0);\n        context.lineTo(i, height);\n        context.stroke();\n    }\n\n    for (\n        var i = coordOuestX;\n        i <= coordCentX;\n        i += (coordEstX - coordCentX) / 6\n    ) {\n        context.moveTo(i, 0);\n        context.lineTo(i, height);\n        context.stroke();\n    }\n    for (\n        var i = coordCentY;\n        i <= coordSudY;\n        i += (coordSudY - coordCentY) / 6\n    ) {\n        context.moveTo(0, i);\n        context.lineTo(width, i);\n        context.stroke();\n    }\n\n    for (\n        var i = coordNordY;\n        i <= coordCentY;\n        i += (coordSudY - coordCentY) / 6\n    ) {\n        context.moveTo(0, i);\n        context.lineTo(width, i);\n        context.stroke();\n    }\n};\n\nexport const SeaMap = (props) => {\n    const { mapArray, mapSettingsData, isStoredMap, storedMapName } = props;\n\n    //Ref\n    const tableRef = useRef(null);\n    const canvasGraticuleRef = useRef(null);\n\n    return (\n        <div>\n            <table\n                id=\"map\"\n                ref={tableRef}\n                className=\"mt-5\"\n                cellSpacing=\"0\"\n                cellPadding=\"0\"\n                style={{ border: \"none\" }}\n            >\n                <tbody>\n                    {mapArray.map((row, rowIndex) => {\n                        return (\n                            <tr key={rowIndex}>\n                                {row.map((cell, cellIndex) => {\n                                    if (\n                                        cellIndex === row.length - 1 &&\n                                        rowIndex === mapArray.length - 1\n                                    ) {\n                                        drawLine(\n                                            tableRef,\n                                            canvasGraticuleRef,\n                                            mapSettingsData,\n                                            mapArray\n                                        );\n                                    }\n                                    return (\n                                        <td\n                                            className=\"mapArrayCell\"\n                                            key={cellIndex}\n                                        >\n                                            <img\n                                                alt=\"\"\n                                                src={`https://a.tile.openstreetmap.fr/osmfr/${cell[0]}/${cell[1]}/${cell[2]}.png`}\n                                            />\n                                            <img\n                                                alt=\"\"\n                                                className=\"overlayed\"\n                                                src={`https://tiles.openseamap.org/seamark/${cell[0]}/${cell[1]}/${cell[2]}.png`}\n                                            />\n                                        </td>\n                                    );\n                                })}\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n            <canvas\n                ref={canvasGraticuleRef}\n                className=\"canvas-style-gaticule mt-5\"\n            ></canvas>\n        </div>\n    );\n};\n","import {\n    Button,\n    Navbar,\n    OverlayTrigger,\n    Tooltip,\n    NavDropdown\n} from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faLifeRing,\n    faMapMarkedAlt,\n    faPencilRuler,\n    faQuestion,\n    faSave\n} from \"@fortawesome/free-solid-svg-icons\";\nimport \"./TopBar.css\";\n\nconst renderTooltip = (title) => <Tooltip id=\"button-tooltip\">{title}</Tooltip>;\n\nexport const TopBar = (props) => {\n    const {\n        setShowSettings,\n        setShowLoadMap,\n        setShowHelp,\n        amerState,\n        routeState\n    } = props;\n    const [amer, setAmer] = amerState;\n\n    const swap = function (nodeA, nodeB) {\n        const parentA = nodeA.parentNode;\n        const siblingA =\n            nodeA.nextSibling === nodeB ? nodeA : nodeA.nextSibling;\n\n        // Move `nodeA` to before the `nodeB`\n        nodeB.parentNode.insertBefore(nodeA, nodeB);\n\n        // Move `nodeB` to before the sibling of `nodeA`\n        parentA.insertBefore(nodeB, siblingA);\n    };\n\n    const [route, setRoute] = routeState;\n    const handleShowSettings = () => setShowSettings(true);\n    const handleShowLoadMap = () => setShowLoadMap(true);\n    const handleShowHelp = () => setShowHelp(true);\n    const handleAmerState = () => {\n        var elemRoute = document.getElementById(\"idRoute\");\n        var elemCanvas = document.getElementById(\"idCanvas\");\n        setAmer(!amer);\n        if (!amer && route) {\n            setRoute(false);\n            swap(elemCanvas, elemRoute);\n        }\n    };\n    const handleRouteState = () => {\n        var elemRoute = document.getElementById(\"idRoute\");\n        var elemCanvas = document.getElementById(\"idCanvas\");\n        setRoute(!route);\n        if (amer && !route) {\n            setAmer(false);\n            swap(elemRoute, elemCanvas);\n        }\n    };\n\n    return (\n        <>\n            <Navbar\n                sticky=\"top\"\n                className=\"navbar-dark\"\n                style={{ position: \"fixed\", width: \"100%\" }}\n                bg=\"dark\"\n            >\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        &nbsp;&nbsp;Assistance Navigation Maritime\n                    </a>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Gérer les coordonnées\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            disabled={!navigator.onLine}\n                            onClick={navigator.onLine && handleShowSettings}\n                        >\n                            <FontAwesomeIcon icon={faMapMarkedAlt} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Charger une carte\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleShowLoadMap}\n                        >\n                            <FontAwesomeIcon icon={faSave} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Placer un amer\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleAmerState}\n                        >\n                            <FontAwesomeIcon icon={faLifeRing} size=\"lg\" />\n                            {!!amer ? \" ON\" : \" OFF\"}\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Tracer une route\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleRouteState}\n                        >\n                            <FontAwesomeIcon icon={faPencilRuler} size=\"lg\" />\n                            {!!route ? \" ON\" : \" OFF\"}\n                        </Button>\n                    </OverlayTrigger>\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={renderTooltip(\"Aide\")}\n                    >\n                        <Button\n                            variant=\"primary\"\n                            className=\"spacedButton\"\n                            onClick={handleShowHelp}\n                        >\n                            <FontAwesomeIcon icon={faQuestion} size=\"lg\" />\n                        </Button>\n                    </OverlayTrigger>\n                    &nbsp;\n                    <label\n                        className=\"ml-auto\"\n                        style={{ color: \"white\", fontWeight: \"bold\" }}\n                        id=\"coordTest\"\n                    ></label>\n                </Navbar.Collapse>\n            </Navbar>\n        </>\n    );\n};\n","import { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { isBetween } from \"../../helpers/helpers\";\nimport { generateMapArray } from \"../../helpers/GenerateMap\";\n\nexport const SettingsModal = (props) => {\n    const {\n        show,\n        setMapArray,\n        mapNameState,\n        savedMapsState,\n        mapSettingsDataState,\n        setIsStoredMap\n    } = props;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [showSettings, setShowSettings] = show;\n    const [mapName, setMapName] = mapNameState;\n\n    // Latitude\n    const [latDeg, setLatDeg] = useState(\"47\");\n    const [latMin, setLatMin] = useState(\"25\");\n    const [latSec, setLatSec] = useState(\"0\");\n    const [latRad, setLatRad] = useState(\"N\");\n\n    // Longitude\n    const [lonDeg, setLonDeg] = useState(\"2\");\n    const [lonMin, setLonMin] = useState(\"50\");\n    const [lonSec, setLonSec] = useState(\"0\");\n    const [lonRad, setLonRad] = useState(\"O\");\n\n    // Distance Longitude\n    const [lonDistDeg, setLonDistDeg] = useState(\"0\");\n    const [lonDistMin, setLonDistMin] = useState(\"15\");\n\n    // Distance Latitude\n    const [latDistDeg, setLatDistDeg] = useState(\"0\");\n    const [latDistMin, setLatDistMin] = useState(\"15\");\n\n    // Footer\n    const [mapZoom, setMapZoom] = useState(\"13\");\n\n    const handleCloseSettings = () => setShowSettings(false);\n    const applySettings = () => {\n        if (!savedMaps.find((savedMap) => savedMap.data.name === mapName)) {\n            const mapArray = generateMapArray({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom)\n            });\n            setIsStoredMap(false);\n            setMapSettingsData({\n                latitude: {\n                    deg: latDeg,\n                    min: latMin,\n                    sec: latSec,\n                    orientation: latRad\n                },\n                longitude: {\n                    deg: lonDeg,\n                    min: lonMin,\n                    sec: lonSec,\n                    orientation: lonRad\n                },\n                longitudeDistance: {\n                    deg: lonDistDeg,\n                    min: lonDistMin\n                },\n                latitudeDistance: {\n                    deg: latDistDeg,\n                    min: latDistMin\n                },\n                zoom: parseInt(mapZoom),\n                name: mapName\n            });\n            setMapArray(mapArray);\n            setSavedMaps([\n                ...savedMaps,\n                {\n                    data: {\n                        latitude: {\n                            deg: latDeg,\n                            min: latMin,\n                            sec: latSec,\n                            orientation: latRad\n                        },\n                        longitude: {\n                            deg: lonDeg,\n                            min: lonMin,\n                            sec: lonSec,\n                            orientation: lonRad\n                        },\n                        longitudeDistance: {\n                            deg: lonDistDeg,\n                            min: lonDistMin\n                        },\n                        latitudeDistance: {\n                            deg: latDistDeg,\n                            min: latDistMin\n                        },\n                        zoom: parseInt(mapZoom),\n                        name: mapName\n                    },\n                    tiles: mapArray\n                }\n            ]);\n            setShowSettings(false);\n        } else {\n            alert(\"Une carte possédant ce nom existe déjà\");\n        }\n    };\n\n    return (\n        <Modal show={showSettings} onHide={handleCloseSettings} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Gestion des coordonnées</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapName\">\n                            Nom de la carte :\n                        </label>\n                        <input\n                            className=\"form-control\"\n                            type=\"text\"\n                            id=\"mapName\"\n                            value={mapName}\n                            onChange={(e) => setMapName(e.target.value)}\n                        />\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Coordonnées Latitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDeg\"\n                                value={latDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -90, 90) &&\n                                    setLatDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latMin\"\n                                value={latMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latSec\"\n                                value={latSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <div\n                            name=\"latitude\"\n                            className=\"btn-group\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioN\"\n                                value=\"N\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"N\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioN\"\n                            >\n                                Nord\n                            </label>\n\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"latRadioS\"\n                                value=\"S\"\n                                autoComplete=\"off\"\n                                checked={latRad === \"S\"}\n                                onChange={(e) => setLatRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"latRadioS\"\n                            >\n                                Sud\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Coordonnées Longitude :</label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDeg\"\n                                value={lonDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -180, 180) &&\n                                    setLonDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonMin\"\n                                value={lonMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonSec\">\n                            Secondes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonSec\"\n                                value={lonSec}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonSec(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>\"</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-2\">\n                        <div\n                            className=\"btn-group\"\n                            name=\"latitude\"\n                            role=\"group\"\n                            aria-label=\"Basic radio toggle button group\"\n                        >\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioE\"\n                                value=\"E\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"E\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioE\"\n                            >\n                                Est\n                            </label>\n                            <input\n                                className=\"btn-check\"\n                                type=\"radio\"\n                                id=\"lonRadioO\"\n                                value=\"O\"\n                                autoComplete=\"off\"\n                                checked={lonRad === \"O\"}\n                                onChange={(e) => setLonRad(e.target.value)}\n                            />\n                            <label\n                                className=\"btn btn-outline-primary\"\n                                htmlFor=\"lonRadioO\"\n                            >\n                                Ouest\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Rayon Latitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistDeg\"\n                                value={latDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -45, 45) &&\n                                    setLatDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"latDistMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"latDistMin\"\n                                value={latDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLatDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <label>Rayon Longitude : </label>\n                </div>\n                <div className=\"row g-3 align-items-end\" noValidate>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistDeg\">\n                            Degré\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistDeg\"\n                                value={lonDistDeg}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, -90, 90) &&\n                                    setLonDistDeg(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>°</b>\n                            </span>\n                        </div>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label className=\"form-label\" htmlFor=\"lonDistMin\">\n                            Minutes\n                        </label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"number\"\n                                id=\"lonDistMin\"\n                                value={lonDistMin}\n                                onChange={(e) =>\n                                    isBetween(e.target.value, 0, 60) &&\n                                    setLonDistMin(e.target.value)\n                                }\n                            />\n                            <span className=\"input-group-text\">\n                                <b>'</b>\n                            </span>\n                        </div>\n                    </div>\n                </div>\n\n                <hr className=\"my-4\" />\n\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <label className=\"form-label\" htmlFor=\"mapZoom\">\n                            Échelle :\n                        </label>\n                        <select\n                            className=\"form-control\"\n                            id=\"mapZoom\"\n                            value={mapZoom}\n                            onChange={(e) => setMapZoom(e.target.value)}\n                        >\n                            <option value=\"10\">1:500 000</option>\n                            <option value=\"11\">1:250 000</option>\n                            <option value=\"12\">1:150 000</option>\n                            <option value=\"13\">1:70 000</option>\n                            <option value=\"14\">1:35 000</option>\n                            <option value=\"15\">1:15 000</option>\n                            <option value=\"16\">1:8 000</option>\n                            <option value=\"17\">1:4 000</option>\n                            <option value=\"18\">1:2 000</option>\n                        </select>\n                    </div>\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseSettings}>\n                    Annuler\n                </Button>\n                <Button variant=\"success\" onClick={applySettings}>\n                    Valider\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { Modal, Button, Form } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\n\nexport const LoadMapModal = (props) => {\n    const {\n        show,\n        mapArrayState,\n        mapNameState,\n        savedMapsState,\n        isStoredMapState,\n        storedMapState,\n        mapSettingsDataState\n    } = props;\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n    const [mapName, setMapName] = mapNameState;\n    const [mapArray, setMapArray] = mapArrayState;\n    const [showLoadMap, setShowLoadMap] = show;\n    const [savedMaps, setSavedMaps] = savedMapsState;\n    const [storedMapName, setStoredMapName] = storedMapState;\n    const [mapSettingsData, setMapSettingsData] = mapSettingsDataState;\n    const [currentlySelectedMapName, setCurrentlySelectedMapName] =\n        useState(\"\");\n    const handleCloseLoadMap = () => setShowLoadMap(false);\n\n    const handleValidate = () => {\n        if (currentlySelectedMapName) {\n            const ele = document.getElementById(\"dragMap\");\n            ele.style.left = \"0px\";\n            ele.style.top = \"0px\";\n            const selectedMap = savedMaps.find(\n                (map) => map.data.name === currentlySelectedMapName\n            );\n            if (selectedMap) {\n                setMapArray(selectedMap.tiles);\n                setMapSettingsData(selectedMap.data);\n            }\n            handleCloseLoadMap();\n        }\n    };\n\n    return (\n        <Modal show={showLoadMap} onHide={handleCloseLoadMap} size=\"lg\">\n            <Modal.Header>\n                <Modal.Title>Charger une carte</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Nom</Form.Label>\n                        <Form.Control\n                            disabled={!savedMaps.length}\n                            as=\"select\"\n                            value={currentlySelectedMapName}\n                            onChange={(e) =>\n                                setCurrentlySelectedMapName(e.target.value)\n                            }\n                        >\n                            <option selected></option>\n                            {savedMaps.length &&\n                                savedMaps.map((currMap) => (\n                                    <option value={currMap.data.name}>\n                                        {currMap.data.name}\n                                    </option>\n                                ))}\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={handleCloseLoadMap}>\n                    Annuler\n                </Button>\n                <Button\n                    variant=\"success\"\n                    disabled={!savedMaps.length || !currentlySelectedMapName}\n                    onClick={handleValidate}\n                >\n                    Valider Carte\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { useState } from \"react\";\nimport { SettingsModal } from \"./Modals/SettingsModal\";\nimport { LoadMapModal } from \"./Modals/LoadMapModal\";\n\nexport const Modals = (props) => {\n    const {\n        settingsModal,\n        loadMapModal,\n        mapArrayState,\n        isStoredMapState,\n        mapSettingsDataState,\n        mapNameState,\n        storedMapState\n    } = props;\n    const [mapName, setMapName] = mapNameState;\n    const [savedMaps, setSavedMaps] = useState([]);\n    const [mapArray, setMapArray] = mapArrayState;\n    const [isStoredMap, setIsStoredMap] = isStoredMapState;\n\n    return (\n        <>\n            <LoadMapModal\n                show={loadMapModal}\n                mapArrayState={[mapArray, setMapArray]}\n                isStoredMapState={isStoredMapState}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                storedMapState={storedMapState}\n                mapSettingsDataState={mapSettingsDataState}\n            />\n            <SettingsModal\n                mapSettingsDataState={mapSettingsDataState}\n                show={settingsModal}\n                setMapArray={setMapArray}\n                mapNameState={[mapName, setMapName]}\n                savedMapsState={[savedMaps, setSavedMaps]}\n                setIsStoredMap={setIsStoredMap}\n            />\n        </>\n    );\n};\n","import { Modal, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faLifeRing,\n    faMapMarkedAlt,\n    faPencilRuler,\n    faSave\n} from \"@fortawesome/free-solid-svg-icons\";\n\nexport const HelpModal = (props) => {\n    const { showState } = props;\n    const [showHelp, setShowHelp] = showState;\n\n    const handleClose = () => setShowHelp(false);\n\n    return (\n        <Modal show={showHelp} onHide={handleClose} size=\"lg\" centered>\n            <Modal.Header>\n                <Modal.Title>Aide</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    La barre de navigation contient 4 boutons\n                    <br />\n                    <hr />\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                            <Button variant=\"primary\">\n                                <FontAwesomeIcon\n                                    icon={faMapMarkedAlt}\n                                    size=\"lg\"\n                                />\n                            </Button>\n                        </div>\n                        <div className=\"col-md-11\">\n                            &nbsp; Bouton qui permet l'affichage de la fenêtre\n                            de gestion de coordonnées, afin de charger l'endroit\n                            du globe que l'on veut, avec une échelle et une\n                            taille bien précise\n                        </div>\n                    </div>\n                    <hr />\n                    <div className=\"row\">\n                        <div className=\"col-md-1\">\n                            <Button variant=\"primary\">\n                                <FontAwesomeIcon icon={faSave} size=\"lg\" />\n                            </Button>\n                        </div>\n                        <div className=\"col-md-11\">\n                            &nbsp; Bouton qui affiche la fenêtre de chargement\n                            de cartes prédéfinies, qui permet de charger toutes\n                            les cartes déjà initialisées (principalement utile\n                            en mode hors ligne ou bien pour charger aisément une\n                            carte récurrente)\n                        </div>\n                    </div>\n                    <hr />\n                    <div className=\"row\">\n                        <div className=\"col-md-2\">\n                            <Button variant=\"primary\">\n                                <FontAwesomeIcon icon={faLifeRing} size=\"lg\" />\n                                &nbsp;OFF\n                            </Button>\n                        </div>\n                        <div className=\"col-md-10\">\n                            &nbsp; Bouton qui affiche si oui(ON) ou non(OFF) le\n                            mode de repérage d'amer est activé. Lorsque ce\n                            dernier l'est, cliquer sur la carte puis remplir le\n                            formulaire associé va permettre de repérer un amer.\n                            Lorsque 3 amers seront relevés, un point central\n                            ainsi que ses coordonnées seront affichées sur\n                            l'interface, au centre du triangle formé par\n                            l'intersection des droites issues des relevages\n                            d'amers\n                        </div>\n                    </div>\n                    <hr />\n                    <div className=\"row\">\n                        <div className=\"col-md-2\">\n                            <Button variant=\"primary\">\n                                <FontAwesomeIcon\n                                    icon={faPencilRuler}\n                                    size=\"lg\"\n                                />\n                                &nbsp;OFF\n                            </Button>\n                        </div>\n                        <div className=\"col-md-10\">\n                            &nbsp; Bouton qui affiche si oui(ON) ou non(OFF) le\n                            mode de traçage de route est activé. Lorsque ce\n                            dernier l'est, il est possible de cliquer sur la\n                            carte, pour spécifier le point de départ de la\n                            route. Une fois cela fait, une fenêtre va apparaître\n                            et il faudra spécifier certaines variables liées à\n                            la navigation. Une fois le formulaire de la fenêre\n                            validé, cela va tracer différents types de routes,\n                            notamment le courant, la route surface, le cap vrai\n                            ainsi que le cap Compas\n                        </div>\n                    </div>\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Fermer\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import { Canvas } from \"./components/Canvas\";\nimport { Route } from \"./components/Route\";\nimport { SeaMap } from \"./components/SeaMap\";\nimport { TopBar } from \"./components/TopBar\";\nimport { Modals } from \"./components/Modals\";\nimport { HelpModal } from \"./components/HelpModal\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport const App = () => {\n    const [showSettings, setShowSettings] = useState(false);\n    const [showLoadMap, setShowLoadMap] = useState(false);\n    const [showHelp, setShowHelp] = useState(false);\n    const [mapArray, setMapArray] = useState([]);\n    const [isStoredMap, setIsStoredMap] = useState(true);\n    const [mapSettingsData, setMapSettingsData] = useState({});\n    const [mapName, setMapName] = useState(\"Baie de Quiberon\");\n    const [storedMapName, setStoredMapName] = useState(\"\");\n    const [amer, setAmer] = useState(true);\n    const [hasScrollListener, setHasScrollListener] = useState(false);\n    const [route, setRoute] = useState(false);\n\n    useEffect(() => {\n        const ele = document.getElementById(\"dragMap\");\n        if (!hasScrollListener) {\n            let x = 0;\n            let y = 0;\n            let html = document.documentElement;\n            const mouseDownHandler = (e) => {\n                x = e.clientX;\n                y = e.clientY;\n                document.addEventListener(\"mousemove\", mouseMoveHandler);\n                document.addEventListener(\"mouseup\", mouseUpHandler);\n                ele.style.cursor = \"grabbing\";\n                ele.style.userSelect = \"none\";\n            };\n\n            const mouseMoveHandler = (e) => {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (\n                    (ele.offsetLeft > 0 && dx > 0) ||\n                    (html.scrollWidth === html.clientWidth && dx < 0)\n                ) {\n                    dx = 0;\n                }\n                if (\n                    (ele.offsetTop > 0 && dy > 0) ||\n                    (html.scrollHeight === html.clientHeight && dy < 0)\n                ) {\n                    dy = 0;\n                }\n\n                ele.style.top = `${ele.offsetTop + dy}px`;\n                ele.style.left = `${ele.offsetLeft + dx}px`;\n                x = e.clientX;\n                y = e.clientY;\n            };\n\n            const mouseUpHandler = () => {\n                document.removeEventListener(\"mousemove\", mouseMoveHandler);\n                document.removeEventListener(\"mouseup\", mouseUpHandler);\n                ele.style.cursor = \"grab\";\n                ele.style.removeProperty(\"user-select\");\n            };\n            setHasScrollListener(true);\n            ele.addEventListener(\"mousedown\", mouseDownHandler);\n        }\n    }, [amer]);\n\n    return (\n        <>\n            <TopBar\n                setShowSettings={setShowSettings}\n                setShowLoadMap={setShowLoadMap}\n                setShowHelp={setShowHelp}\n                amerState={[amer, setAmer]}\n                routeState={[route, setRoute]}\n            />\n            <Modals\n                settingsModal={[showSettings, setShowSettings]}\n                loadMapModal={[showLoadMap, setShowLoadMap]}\n                isStoredMapState={[isStoredMap, setIsStoredMap]}\n                mapArrayState={[mapArray, setMapArray]}\n                mapSettingsDataState={[mapSettingsData, setMapSettingsData]}\n                mapNameState={[mapName, setMapName]}\n                storedMapState={[storedMapName, setStoredMapName]}\n            />\n            <HelpModal showState={[showHelp, setShowHelp]} />\n            <div\n                id=\"dragMap\"\n                className={!!amer || !!route ? \"amerPointer\" : \"draggable\"}\n            >\n                <SeaMap\n                    mapArray={mapArray}\n                    isStoredMap={isStoredMap}\n                    mapSettingsData={mapSettingsData}\n                    storedMapName={storedMapName}\n                />\n                <Route\n                    route={route}\n                    mapArray={mapArray}\n                    mapSettingsData={mapSettingsData}\n                />\n                <Canvas\n                    amer={amer}\n                    mapArray={mapArray}\n                    mapSettingsData={mapSettingsData}\n                />\n            </div>\n        </>\n    );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nif (window.cordova) {\n    document.addEventListener(\n        \"deviceready\",\n        () => {\n            renderReactDom();\n        },\n        false\n    );\n} else {\n    renderReactDom();\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}